/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zofia.gui;

import com.zofia.dummyclasses.Square;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.border.LineBorder;

/**
 *
 * @author zofia
 */
public class ImagePanel extends javax.swing.JPanel {
    private CanvasPanel panel;
    private Color background;
    private Cell[][] cells;
    private int rows;
    private int columns;
    private int size;

    public ImagePanel(CanvasPanel panel, Color background, Square square) {
        initComponents();
        this.panel = panel;
        this.background = background;
        this.rows = (int) square.getDimension().getHeight();
        this.columns = (int) square.getDimension().getWidth();
        this.size = square.getSize();
        initImage();
    }
    
    private void initImage() {
        this.cells = new Cell[rows][columns];
        this.setLayout(new GridBagLayout());
        this.setSize(new Dimension(rows * size, columns * size));
        GridBagConstraints constraints = new GridBagConstraints();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                constraints.gridx = j;
                constraints.gridy = i;
                Cell cell = new Cell(this, background, size);
                cell.setSize(new Dimension(size, size));
                cells[i][j] = cell;
                Border border = new EtchedBorder();
                cell.setBorder(border);
                this.add(cell, constraints);
            }
        }
    }
    
    public Cell getCells(int row, int column) {
        return cells[row][column];
    }
    
     public void setBorder(boolean border){
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < columns; j++){
                if(border){
                    cells[i][j].setBorder(new LineBorder(Color.BLACK, 0, false));
                }
                else{
                    cells[i][j].setBorder(new EtchedBorder());
                }
            }
        }
    } 
     
    /**
     * Metodo encargado de pintar una celda clickeada con dos posibles casos
     *  1.Con el color actualmente seleccionado. 2. Con el color de fondo predeterminado del canvas, 
     *    en caso de que el borrador se encuentre seleccionado.
     * @param cell
     */
    public void paintCell(Cell cell) {
        if(!panel.getEraser().isSelected()) {
            cell.setBackground(panel.getSelectedButton().getBackground());
        } else {
            cell.setBackground(background);
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 737, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 547, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
