
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.zofia.parsers.timers;

import java_cup.runtime.Symbol;
import com.zofia.lexers.TimeLexer;
import com.zofia.dummyclasses.Image;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import com.zofia.dummyclasses.Time;
import com.zofia.drivers.CanvasDriver;
import com.zofia.logic.Error;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class TimeParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public TimeParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public TimeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TimeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\005\000\002\003" +
    "\007\000\002\017\002\000\002\004\010\000\002\016\007" +
    "\000\002\016\007\000\002\016\007\000\002\016\007\000" +
    "\002\016\007\000\002\016\007\000\002\016\004\000\002" +
    "\011\007\000\002\012\007\000\002\015\007\000\002\020" +
    "\002\000\002\006\006\000\002\005\005\000\002\005\003" +
    "\000\002\014\005\000\002\014\005\000\002\014\004\000" +
    "\002\010\007\000\002\013\005\000\002\007\005\000\002" +
    "\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\004\004\005\001\002\000\004\002\126\001" +
    "\002\000\004\006\007\001\002\000\004\005\125\001\002" +
    "\000\004\013\010\001\002\000\004\004\011\001\002\000" +
    "\004\021\013\001\002\000\004\005\124\001\002\000\004" +
    "\013\014\001\002\000\004\004\015\001\002\000\012\003" +
    "\021\010\023\011\022\012\025\001\002\000\004\014\115" +
    "\001\002\000\004\005\ufffe\001\002\000\004\014\104\001" +
    "\002\000\004\005\100\001\002\000\004\013\074\001\002" +
    "\000\004\013\070\001\002\000\004\014\061\001\002\000" +
    "\004\013\026\001\002\000\004\020\027\001\002\000\004" +
    "\004\030\001\002\000\010\003\036\007\033\015\034\001" +
    "\002\000\004\017\032\001\002\000\006\005\ufff3\014\ufff3" +
    "\001\002\000\004\013\055\001\002\000\004\013\053\001" +
    "\002\000\004\014\051\001\002\000\004\005\045\001\002" +
    "\000\004\005\ufff2\001\002\000\004\014\041\001\002\000" +
    "\004\007\033\001\002\000\004\005\uffed\001\002\000\004" +
    "\005\045\001\002\000\006\005\ufff1\017\ufff1\001\002\000" +
    "\010\005\uffef\014\046\017\uffef\001\002\000\004\004\030" +
    "\001\002\000\006\005\ufff0\017\ufff0\001\002\000\004\005" +
    "\uffec\001\002\000\004\015\034\001\002\000\004\005\uffee" +
    "\001\002\000\004\022\054\001\002\000\006\005\uffea\014" +
    "\uffea\001\002\000\004\016\056\001\002\000\004\021\057" +
    "\001\002\000\004\016\060\001\002\000\006\005\uffeb\014" +
    "\uffeb\001\002\000\006\011\022\012\025\001\002\000\004" +
    "\014\066\001\002\000\004\014\064\001\002\000\004\012" +
    "\025\001\002\000\004\005\ufffc\001\002\000\004\011\022" +
    "\001\002\000\004\005\ufffb\001\002\000\004\016\071\001" +
    "\002\000\004\021\072\001\002\000\004\016\073\001\002" +
    "\000\006\005\ufff5\014\ufff5\001\002\000\004\016\075\001" +
    "\002\000\004\021\076\001\002\000\004\016\077\001\002" +
    "\000\006\005\ufff4\014\ufff4\001\002\000\006\005\uffe8\014" +
    "\102\001\002\000\004\005\ufff6\001\002\000\004\021\013" +
    "\001\002\000\004\005\uffe9\001\002\000\006\010\023\012" +
    "\025\001\002\000\004\014\111\001\002\000\004\014\107" +
    "\001\002\000\004\012\025\001\002\000\004\005\ufffa\001" +
    "\002\000\004\010\023\001\002\000\004\005\ufff9\001\002" +
    "\000\004\005\100\001\002\000\004\005\ufffd\001\002\000" +
    "\006\010\023\011\022\001\002\000\004\014\122\001\002" +
    "\000\004\014\120\001\002\000\004\011\022\001\002\000" +
    "\004\005\ufff8\001\002\000\004\010\023\001\002\000\004" +
    "\005\ufff7\001\002\000\004\005\uffff\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\023" +
    "\012\017\015\015\016\016\001\001\000\002\001\001\000" +
    "\004\017\112\001\001\000\002\001\001\000\004\007\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\030" +
    "\001\001\000\010\010\034\013\037\014\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\047\001\001\000" +
    "\004\020\042\001\001\000\002\001\001\000\004\010\041" +
    "\001\001\000\002\001\001\000\004\005\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\062\015\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\064\001\001\000" +
    "\002\001\001\000\004\012\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\102\001\001\000\002\001\001\000\006" +
    "\011\105\015\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\107\001\001\000\002\001\001\000\004" +
    "\011\111\001\001\000\002\001\001\000\004\007\113\001" +
    "\001\000\002\001\001\000\006\011\116\012\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\120\001" +
    "\001\000\002\001\001\000\004\011\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TimeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TimeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TimeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private HashMap<String, Image> images;
    private List<Image> timeImages;
    private HashMap<String,String> table;
    private CanvasDriver driver;

    public TimeParser(TimeLexer lexer, HashMap<String,String> table, CanvasDriver driver) {
        super(lexer);
        this.table = table;
        this.images = new HashMap<>();
        this.driver = driver;
        this.timeImages = new ArrayList<>();
    }

    public void syntax_error(Symbol symbol) {
        System.out.println("error sintactico en: " + symbol.sym);
        Error error = new Error(symbol.right,(symbol.left - 1), "Sintactico", "Elemento sintactico desconocido: '" + (String)symbol.value + "'.");
        driver.getErrors().add(error);
    }

    public void logic_error(String lexeme, int line, int column, int type) {
        Error error = null;
        String message;
        switch(type) {
            case 0:
                message = "Ya existe una imagen con el identificador: " + lexeme + ", dicha imagen se descarto.";
                error = new Error(line, column, "Semantico", message);
            break;
            case 1:
                message = "No existe un lienzo con el identificador: " + lexeme + ", todas las imagenes de dicho identificador se descartaron.";
                error = new Error(line, column, "Semantico", message);
            break;
        }
        driver.getErrors().add(error);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$TimeParser$actions {
  private final TimeParser parser;

  /** Constructor */
  CUP$TimeParser$actions(TimeParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TimeParser$do_action_part00000000(
    int                        CUP$TimeParser$act_num,
    java_cup.runtime.lr_parser CUP$TimeParser$parser,
    java.util.Stack            CUP$TimeParser$stack,
    int                        CUP$TimeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TimeParser$result;

      /* select the action based on the action number */
      switch (CUP$TimeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starting EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).value;
		RESULT = start_val;
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TimeParser$parser.done_parsing();
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starting ::= CURLYBRACKETO timesStructure CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("starting",0, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // timesStructure ::= TIEMPOS COLON CURLYBRACKETO canvasTimes CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("timesStructure",1, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-3)).value;
		int timeleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).left;
		int timeright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).right;
		Time time = (Time)((java_cup.runtime.Symbol) CUP$TimeParser$stack.peek()).value;
 if(table.get(id) == null) {
                        logic_error(id, idleft, idright, 1);
                   } else {
                        time.setId(id);
                        driver.addTime(time);
                        timeImages = new ArrayList<>();
                        images = new HashMap<>();
                   }
                
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // canvasTimes ::= IDENTIFICADOR COLON CURLYBRACKETO structurePermutations NT$0 endingCanvas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-5)).value;
		int timeleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).left;
		int timeright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).right;
		Time time = (Time)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).value;

              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("canvasTimes",2, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-5)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // structurePermutations ::= starter COMMA end COMMA images 
            {
              Time RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).value;
		 RESULT = new Time(start, end, "", timeImages); 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("structurePermutations",12, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // structurePermutations ::= starter COMMA images COMMA end 
            {
              Time RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.peek()).value;
		 RESULT = new Time(start, end, "", timeImages); 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("structurePermutations",12, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // structurePermutations ::= end COMMA starter COMMA images 
            {
              Time RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).value;
		 RESULT = new Time(start, end, "", timeImages); 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("structurePermutations",12, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // structurePermutations ::= end COMMA images COMMA starter 
            {
              Time RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).left;
		int startright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.peek()).value;
		 RESULT = new Time(start, end, "", timeImages); 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("structurePermutations",12, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // structurePermutations ::= images COMMA starter COMMA end 
            {
              Time RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.peek()).value;
		 RESULT = new Time(start, end, "", timeImages); 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("structurePermutations",12, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // structurePermutations ::= images COMMA end COMMA starter 
            {
              Time RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).left;
		int startright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.peek()).value;
		 RESULT = new Time(start, end, "", timeImages); 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("structurePermutations",12, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // structurePermutations ::= error endingCanvas 
            {
              Time RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).value;
		 syntax_error((Symbol) e); 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("structurePermutations",12, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // starter ::= INICIO COLON QUOTE IDENTIFICADOR QUOTE 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).value;
		 RESULT = id; 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("starter",7, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // end ::= FIN COLON QUOTE IDENTIFICADOR QUOTE 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).value;
		 RESULT = id; 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("end",8, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // images ::= IMAGENES COLON BRACKETO imagesStructure BRACKETC 
            {
              Image RESULT =null;

              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("images",11, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Object RESULT =null;
		int imageleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).left;
		int imageright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).right;
		Image image = (Image)((java_cup.runtime.Symbol) CUP$TimeParser$stack.peek()).value;
 if(images.get(image.getId()) == null) {
                            images.put(image.getId(), image);
                            timeImages.add(image);
                       } else {
                            logic_error(image.getId(), 0,0,0);
                       }
                    
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // imagesStructure ::= CURLYBRACKETO imagesPermutations NT$1 anotherImage 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).value;
		int imageleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).left;
		int imageright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).right;
		Image image = (Image)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).value;

              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("imagesStructure",4, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-3)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // anotherImage ::= CURLYBRACKETC COMMA imagesStructure 
            {
              Object RESULT =null;

              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("anotherImage",3, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // anotherImage ::= CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("anotherImage",3, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // imagesPermutations ::= idStructure COMMA duration 
            {
              Image RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).value;
		int durationleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).left;
		int durationright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).right;
		Integer duration = (Integer)((java_cup.runtime.Symbol) CUP$TimeParser$stack.peek()).value;
		 RESULT = new Image(id, duration); 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("imagesPermutations",10, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // imagesPermutations ::= duration COMMA idStructure 
            {
              Image RESULT =null;
		int durationleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).left;
		int durationright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).right;
		Integer duration = (Integer)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.peek()).value;
		 RESULT = new Image(id, duration); 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("imagesPermutations",10, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // imagesPermutations ::= error anotherImage 
            {
              Image RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).value;
		 syntax_error((Symbol) e); 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("imagesPermutations",10, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // idStructure ::= ID COLON QUOTE IDENTIFICADOR QUOTE 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-1)).value;
		 RESULT = id; 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("idStructure",6, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-4)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // duration ::= DURACION COLON INT 
            {
              Integer RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$TimeParser$stack.peek()).value;
		 RESULT = integer; 
              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("duration",9, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // endingCanvas ::= CURLYBRACKETC COMMA canvasTimes 
            {
              Object RESULT =null;

              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("endingCanvas",5, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.elementAt(CUP$TimeParser$top-2)), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // endingCanvas ::= CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$TimeParser$result = parser.getSymbolFactory().newSymbol("endingCanvas",5, ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TimeParser$stack.peek()), RESULT);
            }
          return CUP$TimeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TimeParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TimeParser$do_action(
    int                        CUP$TimeParser$act_num,
    java_cup.runtime.lr_parser CUP$TimeParser$parser,
    java.util.Stack            CUP$TimeParser$stack,
    int                        CUP$TimeParser$top)
    throws java.lang.Exception
    {
              return CUP$TimeParser$do_action_part00000000(
                               CUP$TimeParser$act_num,
                               CUP$TimeParser$parser,
                               CUP$TimeParser$stack,
                               CUP$TimeParser$top);
    }
}

}
