
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.zofia.parsers.canvas;

import java_cup.runtime.Symbol;
import com.zofia.lexers.CanvasLexer;
import java.util.HashMap;
import java.awt.Color;
import com.zofia.dummyclasses.Square;
import com.zofia.dummyclasses.Canvas;
import java.awt.Dimension;
import com.zofia.drivers.CanvasDriver;
import com.zofia.logic.Error;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CanvasParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CanvasParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CanvasParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CanvasParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\005\000\002\003" +
    "\007\000\002\037\002\000\002\004\012\000\002\004\007" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\004\000\002\005\005\000\002" +
    "\006\005\000\002\007\003\000\002\007\003\000\002\010" +
    "\007\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\017\005\000" +
    "\002\020\005\000\002\021\005\000\002\014\005\000\002" +
    "\014\005\000\002\015\005\000\002\015\005\000\002\016" +
    "\005\000\002\016\005\000\002\013\005\000\002\025\007" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\022\005\000\002\023\005\000\002\024\005\000\002" +
    "\027\005\000\002\027\005\000\002\030\005\000\002\030" +
    "\005\000\002\031\005\000\002\031\005\000\002\033\007" +
    "\000\002\033\007\000\002\033\007\000\002\033\007\000" +
    "\002\033\007\000\002\033\007\000\002\034\007\000\002" +
    "\034\007\000\002\034\007\000\002\034\007\000\002\034" +
    "\007\000\002\034\007\000\002\036\007\000\002\036\007" +
    "\000\002\036\007\000\002\036\007\000\002\036\007\000" +
    "\002\036\007\000\002\035\007\000\002\035\007\000\002" +
    "\035\007\000\002\035\007\000\002\035\007\000\002\035" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\004\005\001\002\000\004\002\342\001" +
    "\002\000\004\006\006\001\002\000\004\022\011\001\002" +
    "\000\004\005\010\001\002\000\004\002\000\001\002\000" +
    "\004\004\012\001\002\000\004\007\013\001\002\000\004" +
    "\022\016\001\002\000\004\005\015\001\002\000\004\005" +
    "\uffff\001\002\000\004\004\017\001\002\000\014\003\026" +
    "\010\027\012\024\015\022\021\030\001\002\000\004\023" +
    "\310\001\002\000\004\023\256\001\002\000\004\022\201" +
    "\001\002\000\004\005\175\001\002\000\004\022\171\001" +
    "\002\000\004\023\137\001\002\000\004\005\136\001\002" +
    "\000\004\022\134\001\002\000\004\022\064\001\002\000" +
    "\004\023\032\001\002\000\010\010\027\012\024\015\022" +
    "\001\002\000\004\023\055\001\002\000\004\023\046\001" +
    "\002\000\004\023\037\001\002\000\004\005\ufff9\001\002" +
    "\000\006\010\027\015\022\001\002\000\004\023\044\001" +
    "\002\000\004\023\042\001\002\000\004\010\027\001\002" +
    "\000\004\005\uffcb\001\002\000\004\015\022\001\002\000" +
    "\004\005\uffca\001\002\000\006\010\027\012\024\001\002" +
    "\000\004\023\053\001\002\000\004\023\051\001\002\000" +
    "\004\010\027\001\002\000\004\005\uffce\001\002\000\004" +
    "\012\024\001\002\000\004\005\uffcf\001\002\000\006\012" +
    "\024\015\022\001\002\000\004\023\062\001\002\000\004" +
    "\023\060\001\002\000\004\015\022\001\002\000\004\005" +
    "\uffcc\001\002\000\004\012\024\001\002\000\004\005\uffcd" +
    "\001\002\000\004\004\065\001\002\000\010\024\072\025" +
    "\071\026\070\001\002\000\004\023\124\001\002\000\004" +
    "\005\123\001\002\000\004\022\121\001\002\000\004\022" +
    "\117\001\002\000\004\022\115\001\002\000\004\023\105" +
    "\001\002\000\004\023\075\001\002\000\006\024\072\025" +
    "\071\001\002\000\004\005\uffdf\001\002\000\004\023\103" +
    "\001\002\000\004\023\101\001\002\000\004\025\071\001" +
    "\002\000\004\005\uffd7\001\002\000\004\024\072\001\002" +
    "\000\004\005\uffd6\001\002\000\006\025\071\026\070\001" +
    "\002\000\004\023\113\001\002\000\004\005\uffe1\001\002" +
    "\000\004\023\111\001\002\000\004\025\071\001\002\000" +
    "\004\005\uffda\001\002\000\004\026\070\001\002\000\004" +
    "\005\uffdb\001\002\000\004\031\116\001\002\000\006\005" +
    "\uffde\023\uffde\001\002\000\004\031\120\001\002\000\006" +
    "\005\uffdd\023\uffdd\001\002\000\004\031\122\001\002\000" +
    "\006\005\uffdc\023\uffdc\001\002\000\006\005\uffe2\023\uffe2" +
    "\001\002\000\006\024\072\026\070\001\002\000\004\005" +
    "\uffe0\001\002\000\004\023\132\001\002\000\004\023\130" +
    "\001\002\000\004\024\072\001\002\000\004\005\uffd8\001" +
    "\002\000\004\026\070\001\002\000\004\005\uffd9\001\002" +
    "\000\004\011\135\001\002\000\006\005\ufff6\023\ufff6\001" +
    "\002\000\004\005\ufff7\001\002\000\010\010\027\015\022" +
    "\021\030\001\002\000\004\023\162\001\002\000\004\023" +
    "\153\001\002\000\004\023\144\001\002\000\004\005\ufffa" +
    "\001\002\000\006\010\027\015\022\001\002\000\004\023" +
    "\151\001\002\000\004\023\147\001\002\000\004\010\027" +
    "\001\002\000\004\005\uffbf\001\002\000\004\015\022\001" +
    "\002\000\004\005\uffbe\001\002\000\006\010\027\021\030" +
    "\001\002\000\004\023\160\001\002\000\004\023\156\001" +
    "\002\000\004\010\027\001\002\000\004\005\uffc0\001\002" +
    "\000\004\021\030\001\002\000\004\005\uffc1\001\002\000" +
    "\006\015\022\021\030\001\002\000\004\023\167\001\002" +
    "\000\004\023\165\001\002\000\004\021\030\001\002\000" +
    "\004\005\uffc3\001\002\000\004\015\022\001\002\000\004" +
    "\005\uffc2\001\002\000\006\013\173\014\172\001\002\000" +
    "\006\005\ufff3\023\ufff3\001\002\000\006\005\ufff4\023\ufff4" +
    "\001\002\000\006\005\ufff5\023\ufff5\001\002\000\006\005" +
    "\ufffc\023\ufffe\001\002\000\004\023\177\001\002\000\004" +
    "\007\013\001\002\000\004\005\ufffd\001\002\000\004\004" +
    "\202\001\002\000\012\016\214\017\207\020\203\027\211" +
    "\001\002\000\004\022\254\001\002\000\004\023\244\001" +
    "\002\000\004\023\234\001\002\000\004\005\233\001\002" +
    "\000\004\022\231\001\002\000\004\005\ufff1\001\002\000" +
    "\004\022\227\001\002\000\004\023\217\001\002\000\004" +
    "\005\ufff0\001\002\000\004\022\215\001\002\000\004\031" +
    "\216\001\002\000\006\005\uffec\023\uffec\001\002\000\006" +
    "\016\214\020\203\001\002\000\004\005\uffed\001\002\000" +
    "\004\023\225\001\002\000\004\023\223\001\002\000\004" +
    "\020\203\001\002\000\004\005\uffe4\001\002\000\004\016" +
    "\214\001\002\000\004\005\uffe5\001\002\000\004\030\230" +
    "\001\002\000\004\005\uffe3\001\002\000\004\031\232\001" +
    "\002\000\006\005\uffea\023\uffea\001\002\000\006\005\ufff2" +
    "\023\ufff2\001\002\000\006\016\214\017\207\001\002\000" +
    "\004\023\242\001\002\000\004\005\uffee\001\002\000\004" +
    "\023\240\001\002\000\004\017\207\001\002\000\004\005" +
    "\uffe7\001\002\000\004\016\214\001\002\000\004\005\uffe6" +
    "\001\002\000\006\017\207\020\203\001\002\000\004\023" +
    "\252\001\002\000\004\005\uffef\001\002\000\004\023\250" +
    "\001\002\000\004\017\207\001\002\000\004\005\uffe9\001" +
    "\002\000\004\020\203\001\002\000\004\005\uffe8\001\002" +
    "\000\004\031\255\001\002\000\006\005\uffeb\023\uffeb\001" +
    "\002\000\010\010\027\012\024\021\030\001\002\000\004" +
    "\005\ufff8\001\002\000\004\023\301\001\002\000\004\023" +
    "\272\001\002\000\004\023\263\001\002\000\006\010\027" +
    "\021\030\001\002\000\004\023\270\001\002\000\004\023" +
    "\266\001\002\000\004\010\027\001\002\000\004\005\uffc6" +
    "\001\002\000\004\021\030\001\002\000\004\005\uffc7\001" +
    "\002\000\006\010\027\012\024\001\002\000\004\023\277" +
    "\001\002\000\004\023\275\001\002\000\004\010\027\001" +
    "\002\000\004\005\uffc4\001\002\000\004\012\024\001\002" +
    "\000\004\005\uffc5\001\002\000\006\012\024\021\030\001" +
    "\002\000\004\023\306\001\002\000\004\023\304\001\002" +
    "\000\004\021\030\001\002\000\004\005\uffc9\001\002\000" +
    "\004\012\024\001\002\000\004\005\uffc8\001\002\000\010" +
    "\012\024\015\022\021\030\001\002\000\004\023\333\001" +
    "\002\000\004\023\324\001\002\000\004\023\315\001\002" +
    "\000\004\005\ufffb\001\002\000\006\015\022\021\030\001" +
    "\002\000\004\023\322\001\002\000\004\023\320\001\002" +
    "\000\004\015\022\001\002\000\004\005\uffd1\001\002\000" +
    "\004\021\030\001\002\000\004\005\uffd0\001\002\000\006" +
    "\012\024\021\030\001\002\000\004\023\331\001\002\000" +
    "\004\023\327\001\002\000\004\021\030\001\002\000\004" +
    "\005\uffd4\001\002\000\004\012\024\001\002\000\004\005" +
    "\uffd5\001\002\000\006\012\024\015\022\001\002\000\004" +
    "\023\340\001\002\000\004\023\336\001\002\000\004\015" +
    "\022\001\002\000\004\005\uffd3\001\002\000\004\012\024" +
    "\001\002\000\004\005\uffd2\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\017\006\024\010\020\025" +
    "\030\032\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\032\006\034\010" +
    "\033\034\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\037\010" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\042\001\001\000\002\001\001\000\004\010\044\001" +
    "\001\000\002\001\001\000\006\005\046\006\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\051\001" +
    "\001\000\002\001\001\000\004\006\053\001\001\000\002" +
    "\001\001\000\006\006\056\010\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\060\001\001\000\002" +
    "\001\001\000\004\006\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\072\023\065\024\073\026\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\077\023\076\031\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\101\001\001\000\002\001\001\000\004\022" +
    "\103\001\001\000\002\001\001\000\010\023\105\024\107" +
    "\027\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\111\001\001\000\002\001\001" +
    "\000\004\024\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\125\024\126\030\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\130\001" +
    "\001\000\002\001\001\000\004\024\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\137\010\140\025\141\035\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\144\010\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\147\001\001\000" +
    "\002\001\001\000\004\010\151\001\001\000\002\001\001" +
    "\000\006\005\153\025\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\156\001\001\000\002\001\001" +
    "\000\004\025\160\001\001\000\002\001\001\000\006\010" +
    "\163\025\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\165\001\001\000\002\001\001\000\004\010" +
    "\167\001\001\000\002\001\001\000\004\007\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\175\001\001\000\002\001\001\000\004\004\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\205\012\207\013\212\017\203\020\204\021\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\217" +
    "\017\221\020\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\223\001\001\000\002" +
    "\001\001\000\004\017\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\235\017\236\021" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\240\001\001\000\002\001\001\000" +
    "\004\017\242\001\001\000\002\001\001\000\010\014\245" +
    "\020\246\021\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\250\001\001\000\002" +
    "\001\001\000\004\020\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\257\006\261" +
    "\025\260\036\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\263" +
    "\025\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\266\001\001\000\002\001\001\000\004\025\270" +
    "\001\001\000\002\001\001\000\006\005\272\006\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\275" +
    "\001\001\000\002\001\001\000\004\006\277\001\001\000" +
    "\002\001\001\000\006\006\302\025\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\304\001\001\000" +
    "\002\001\001\000\004\006\306\001\001\000\002\001\001" +
    "\000\012\006\312\010\311\025\310\033\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\315\025\316\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\320\001\001\000\002" +
    "\001\001\000\004\025\322\001\001\000\002\001\001\000" +
    "\006\006\325\025\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\327\001\001\000\002\001\001\000" +
    "\004\006\331\001\001\000\002\001\001\000\006\006\334" +
    "\010\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\336\001\001\000\002\001\001\000\004\006\340" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CanvasParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CanvasParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CanvasParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private HashMap<String, String> table;
    private CanvasDriver driver;
    private boolean error;

    public CanvasParser(CanvasLexer lexer, HashMap<String, String> table, CanvasDriver driver) {
        super(lexer);
        this.table = table;
        this.driver = driver;
        this.error = false;
    }

    public void syntax_error(Symbol symbol) {
        System.out.println("error sintactico en: " + symbol.sym);
        Error error = new Error(symbol.right,(symbol.left - 1), "Sintactico", "Elemento sintactico desconocido: '" + (String)symbol.value + "'.");
        driver.getErrors().add(error);
    }

    public void logic_error(String lexeme, int line, int column) {
        Error error = new Error(line,column, "Semantico", "El lienzo '" + lexeme + "' ya existe en el ambito actual.");
        driver.getErrors().add(error);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CanvasParser$actions {
  private final CanvasParser parser;

  /** Constructor */
  CUP$CanvasParser$actions(CanvasParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CanvasParser$do_action_part00000000(
    int                        CUP$CanvasParser$act_num,
    java_cup.runtime.lr_parser CUP$CanvasParser$parser,
    java.util.Stack            CUP$CanvasParser$stack,
    int                        CUP$CanvasParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CanvasParser$result;

      /* select the action based on the action number */
      switch (CUP$CanvasParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starting EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).value;
		RESULT = start_val;
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CanvasParser$parser.done_parsing();
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starting ::= CURLYBRACKETO canvasStructure CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("starting",0, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // canvasStructure ::= LIENZOS COLON CURLYBRACKETO specificCanvas CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("canvasStructure",1, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int canvasleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).left;
		int canvasright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).right;
		Canvas canvas = (Canvas)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).value;
 if(table.get(id) == null) {
                        canvas.setId(id);
                        driver.addCanvas(canvas);
                        table.put(id,id);
                      } else {
                        logic_error(id, idleft-1, idright);
                      }
                    
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // specificCanvas ::= ID COLON CURLYBRACKETO structure CURLYBRACKETC NT$0 COMMA specificCanvas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-7)).value;
		int canvasleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int canvasright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Canvas canvas = (Canvas)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;

              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("specificCanvas",2, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-7)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // specificCanvas ::= ID COLON CURLYBRACKETO structure CURLYBRACKETC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int canvasleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).left;
		int canvasright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).right;
		Canvas canvas = (Canvas)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).value;
		 if(table.get(id) == null) {
                        canvas.setId(id);
                        driver.addCanvas(canvas);
                        table.put(id,id);
                      } else {
                        logic_error(id, idleft-1, idright);
                      }
                    
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("specificCanvas",2, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // structure ::= name COMMA namePermutations 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int canvasleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int canvasright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Canvas canvas = (Canvas)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,canvas.getType(), canvas.getColor(), canvas.getSquare()); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("structure",24, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // structure ::= type COMMA typePermutations 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int canvasleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int canvasright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Canvas canvas = (Canvas)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",canvas.getName(),type.substring(1, (type.length() - 1)), canvas.getColor(), canvas.getSquare()); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("structure",24, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // structure ::= size COMMA sizePermutations 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int canvasleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int canvasright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Canvas canvas = (Canvas)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",canvas.getName(),canvas.getType(), canvas.getColor(), size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("structure",24, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // structure ::= background COMMA backgroundPermutations 
            {
              Canvas RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int canvasleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int canvasright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Canvas canvas = (Canvas)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",canvas.getName(),canvas.getType(), color, canvas.getSquare()); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("structure",24, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // structure ::= error CURLYBRACKETC 
            {
              Canvas RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).value;
		 syntax_error((Symbol) e); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("structure",24, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // name ::= NOMBRE COLON NAME 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = name.substring(1,(name.length()-1)); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("name",3, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= TIPO COLON extension 
            {
              String RESULT =null;
		int extensionleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int extensionright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String extension = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = extension; 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // extension ::= PNG 
            {
              String RESULT =null;
		int pngleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int pngright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String png = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = png; 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("extension",5, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // extension ::= GIF 
            {
              String RESULT =null;
		int gifleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int gifright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String gif = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = gif; 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("extension",5, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // background ::= FONDO COLON CURLYBRACKETO backgroundType CURLYBRACKETC 
            {
              Color RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).value;
		 RESULT = color; 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("background",6, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // backgroundType ::= rgbBackground 
            {
              Color RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = color; 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("backgroundType",7, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // backgroundType ::= hexBackground 
            {
              Color RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = color; 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("backgroundType",7, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rgbBackground ::= red COMMA redPermutations 
            {
              Color RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Color(red, color.getGreen(), color.getBlue()); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("rgbBackground",8, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rgbBackground ::= green COMMA greenPermutations 
            {
              Color RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Color(color.getRed(), green, color.getBlue()); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("rgbBackground",8, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rgbBackground ::= blue COMMA bluePermutations 
            {
              Color RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Color(color.getRed(), color.getGreen(), blue); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("rgbBackground",8, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // red ::= RED COLON INT 
            {
              Integer RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = Integer.valueOf(integer); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("red",13, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // green ::= GREEN COLON INT 
            {
              Integer RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = integer; 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("green",14, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // blue ::= BLUE COLON INT 
            {
              Integer RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = integer; 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("blue",15, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // redPermutations ::= green COMMA blue 
            {
              Color RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int blueleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Color(0,green,blue); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("redPermutations",10, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // redPermutations ::= blue COMMA green 
            {
              Color RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int greenleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Color(0,green,blue); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("redPermutations",10, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // greenPermutations ::= red COMMA blue 
            {
              Color RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int blueleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Color(red,0,blue); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("greenPermutations",11, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // greenPermutations ::= blue COMMA red 
            {
              Color RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int redleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Color(red,0,blue); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("greenPermutations",11, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bluePermutations ::= green COMMA red 
            {
              Color RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int redleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Color(red,green,0); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("bluePermutations",12, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bluePermutations ::= red COMMA green 
            {
              Color RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int greenleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Color(red,green,0); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("bluePermutations",12, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // hexBackground ::= HEX COLON HEXCODE 
            {
              Color RESULT =null;
		int hexcodeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int hexcoderight = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String hexcode = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = Color.decode(hexcode); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("hexBackground",9, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // size ::= SIZE COLON CURLYBRACKETO sizeStructure CURLYBRACKETC 
            {
              Square RESULT =null;
		int squareleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).left;
		int squareright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).right;
		Square square = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-1)).value;
		 RESULT = square; 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("size",19, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sizeStructure ::= square COMMA squarePermutations 
            {
              Square RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int squareleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int squareright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Square square = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Square(square.getDimension(), size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("sizeStructure",20, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sizeStructure ::= x COMMA xPermutations 
            {
              Square RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int squareleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int squareright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Square square = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Square(new Dimension(x, (int) square.getDimension().getHeight()), square.getSize()); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("sizeStructure",20, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sizeStructure ::= y COMMA yPermutations 
            {
              Square RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int squareleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int squareright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Square square = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Square(new Dimension((int) square.getDimension().getWidth(), y), square.getSize()); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("sizeStructure",20, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // square ::= CUADRO COLON INT 
            {
              Integer RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = size; 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("square",16, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // x ::= DIMENSIONX COLON INT 
            {
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = x; 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("x",17, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // y ::= DIMENSIONY COLON INT 
            {
              Integer RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = y; 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("y",18, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // squarePermutations ::= x COMMA y 
            {
              Square RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Square(new Dimension(x,y), 0); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("squarePermutations",21, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // squarePermutations ::= y COMMA x 
            {
              Square RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Square(new Dimension(x,y), 0); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("squarePermutations",21, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // xPermutations ::= square COMMA y 
            {
              Square RESULT =null;
		int squareleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int squareright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer square = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Square(new Dimension(0,y), square); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("xPermutations",22, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // xPermutations ::= y COMMA square 
            {
              Square RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int squareleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int squareright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer square = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Square(new Dimension(0,y), square); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("xPermutations",22, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // yPermutations ::= square COMMA x 
            {
              Square RESULT =null;
		int squareleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int squareright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer square = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Square(new Dimension(x,0), square); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("yPermutations",23, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // yPermutations ::= x COMMA square 
            {
              Square RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int squareleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int squareright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Integer square = (Integer)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Square(new Dimension(x,0), square); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("yPermutations",23, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // namePermutations ::= background COMMA size COMMA type 
            {
              Canvas RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("","",type.substring(1, (type.length() - 1)),color,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("namePermutations",25, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // namePermutations ::= background COMMA type COMMA size 
            {
              Canvas RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("","",type.substring(1, (type.length() - 1)),color,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("namePermutations",25, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // namePermutations ::= size COMMA type COMMA background 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("","",type.substring(1, (type.length() - 1)),color,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("namePermutations",25, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // namePermutations ::= size COMMA background COMMA type 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("","",type.substring(1, (type.length() - 1)),color,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("namePermutations",25, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // namePermutations ::= type COMMA size COMMA background 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("","",type.substring(1, (type.length() - 1)),color,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("namePermutations",25, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // namePermutations ::= type COMMA background COMMA size 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("","",type.substring(1, (type.length() - 1)),color,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("namePermutations",25, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sizePermutations ::= background COMMA name COMMA type 
            {
              Canvas RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,type.substring(1, (type.length() - 1)),color,null); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("sizePermutations",26, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sizePermutations ::= background COMMA type COMMA name 
            {
              Canvas RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,type.substring(1, (type.length() - 1)),color,null); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("sizePermutations",26, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sizePermutations ::= name COMMA background COMMA type 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,type.substring(1, (type.length() - 1)),color,null); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("sizePermutations",26, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sizePermutations ::= name COMMA type COMMA background 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,type.substring(1, (type.length() - 1)),color,null); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("sizePermutations",26, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sizePermutations ::= type COMMA background COMMA name 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,type.substring(1, (type.length() - 1)),color,null); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("sizePermutations",26, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sizePermutations ::= type COMMA name COMMA background 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,type.substring(1, (type.length() - 1)),color,null); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("sizePermutations",26, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // backgroundPermutations ::= name COMMA type COMMA size 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,type.substring(1, (type.length() - 1)),null,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("backgroundPermutations",28, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // backgroundPermutations ::= name COMMA size COMMA type 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,type.substring(1, (type.length() - 1)),null,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("backgroundPermutations",28, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // backgroundPermutations ::= type COMMA name COMMA size 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,type.substring(1, (type.length() - 1)),null,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("backgroundPermutations",28, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // backgroundPermutations ::= type COMMA size COMMA name 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,type.substring(1, (type.length() - 1)),null,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("backgroundPermutations",28, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // backgroundPermutations ::= size COMMA name COMMA type 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,type.substring(1, (type.length() - 1)),null,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("backgroundPermutations",28, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // backgroundPermutations ::= size COMMA type COMMA name 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,type.substring(1, (type.length() - 1)),null,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("backgroundPermutations",28, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // typePermutations ::= name COMMA background COMMA size 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,"",color,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("typePermutations",27, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // typePermutations ::= name COMMA size COMMA background 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,"",color,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("typePermutations",27, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // typePermutations ::= background COMMA name COMMA size 
            {
              Canvas RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,"",color,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("typePermutations",27, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // typePermutations ::= background COMMA size COMMA name 
            {
              Canvas RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,"",color,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("typePermutations",27, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // typePermutations ::= size COMMA background COMMA name 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,"",color,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("typePermutations",27, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // typePermutations ::= size COMMA name COMMA background 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).right;
		Square size = (Square)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasParser$stack.peek()).value;
		 RESULT = new Canvas("",name,"",color,size); 
              CUP$CanvasParser$result = parser.getSymbolFactory().newSymbol("typePermutations",27, ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.elementAt(CUP$CanvasParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasParser$stack.peek()), RESULT);
            }
          return CUP$CanvasParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CanvasParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CanvasParser$do_action(
    int                        CUP$CanvasParser$act_num,
    java_cup.runtime.lr_parser CUP$CanvasParser$parser,
    java.util.Stack            CUP$CanvasParser$stack,
    int                        CUP$CanvasParser$top)
    throws java.lang.Exception
    {
              return CUP$CanvasParser$do_action_part00000000(
                               CUP$CanvasParser$act_num,
                               CUP$CanvasParser$parser,
                               CUP$CanvasParser$stack,
                               CUP$CanvasParser$top);
    }
}

}
