
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.zofia.parsers.colors;

import java_cup.runtime.Symbol;
import com.zofia.lexers.ColorsLexer;
import java.awt.Color;
import com.zofia.dummyclasses.CanvasColor;
import java.util.HashMap;
import com.zofia.drivers.CanvasDriver;
import com.zofia.logic.Error;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ColorsParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ColorsParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ColorsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ColorsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\005\000\002\003" +
    "\007\000\002\021\002\000\002\004\010\000\002\022\002" +
    "\000\002\007\010\000\002\007\004\000\002\015\003\000" +
    "\002\015\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\016\005\000\002\017\005\000\002\020" +
    "\005\000\002\011\005\000\002\011\005\000\002\012\005" +
    "\000\002\012\005\000\002\013\005\000\002\013\005\000" +
    "\002\010\005\000\002\005\005\000\002\005\003\000\002" +
    "\006\005\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\004\005\001\002\000\004\002\112\001" +
    "\002\000\004\006\006\001\002\000\004\013\011\001\002" +
    "\000\004\005\010\001\002\000\004\002\000\001\002\000" +
    "\004\004\012\001\002\000\004\007\013\001\002\000\004" +
    "\013\016\001\002\000\004\005\015\001\002\000\004\005" +
    "\uffff\001\002\000\004\004\017\001\002\000\006\003\022" +
    "\007\020\001\002\000\004\013\034\001\002\000\004\005" +
    "\ufffe\001\002\000\004\005\024\001\002\000\004\005\ufffa" +
    "\001\002\000\006\005\uffe9\014\025\001\002\000\006\003" +
    "\022\007\020\001\002\000\004\005\uffea\001\002\000\004" +
    "\005\030\001\002\000\006\005\uffe7\014\032\001\002\000" +
    "\004\005\ufffd\001\002\000\004\007\013\001\002\000\004" +
    "\005\uffe8\001\002\000\004\004\035\001\002\000\012\010" +
    "\047\011\044\012\036\015\046\001\002\000\004\013\110" +
    "\001\002\000\004\005\ufffc\001\002\000\004\014\076\001" +
    "\002\000\004\014\066\001\002\000\004\005\ufff9\001\002" +
    "\000\004\005\ufff8\001\002\000\004\013\064\001\002\000" +
    "\004\014\054\001\002\000\004\013\052\001\002\000\004" +
    "\013\050\001\002\000\004\017\051\001\002\000\006\005" +
    "\ufff4\014\ufff4\001\002\000\004\016\053\001\002\000\004" +
    "\005\uffeb\001\002\000\006\010\047\012\036\001\002\000" +
    "\004\005\ufff5\001\002\000\004\014\062\001\002\000\004" +
    "\014\060\001\002\000\004\012\036\001\002\000\004\005" +
    "\uffec\001\002\000\004\010\047\001\002\000\004\005\uffed" +
    "\001\002\000\004\017\065\001\002\000\006\005\ufff2\014" +
    "\ufff2\001\002\000\006\010\047\011\044\001\002\000\004" +
    "\014\074\001\002\000\004\005\ufff6\001\002\000\004\014" +
    "\072\001\002\000\004\011\044\001\002\000\004\005\uffef" +
    "\001\002\000\004\010\047\001\002\000\004\005\uffee\001" +
    "\002\000\006\011\044\012\036\001\002\000\004\014\104" +
    "\001\002\000\004\005\ufff7\001\002\000\004\014\102\001" +
    "\002\000\004\011\044\001\002\000\004\005\ufff1\001\002" +
    "\000\004\012\036\001\002\000\004\005\ufff0\001\002\000" +
    "\004\005\024\001\002\000\004\005\ufffb\001\002\000\004" +
    "\017\111\001\002\000\006\005\ufff3\014\ufff3\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\020\001\001\000\002\001" +
    "\001\000\004\021\026\001\001\000\004\005\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\025\001" +
    "\001\000\002\001\001\000\004\006\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\042\014\041" +
    "\015\036\016\037\017\040\020\044\001\001\000\002\001" +
    "\001\000\004\022\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\054\016\056\017\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\060\001\001\000\002\001\001\000\004\016\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\067\016\070\020\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\072\001\001\000\002\001\001\000\004\016\074\001\001" +
    "\000\002\001\001\000\010\011\077\017\100\020\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\102\001\001\000\002\001\001\000\004\017" +
    "\104\001\001\000\002\001\001\000\004\005\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ColorsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ColorsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ColorsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private HashMap<String, CanvasColor> colors;
    private HashMap<String, String> table;
    private CanvasDriver driver; 

    public ColorsParser(ColorsLexer lexer, HashMap<String,String> table, CanvasDriver driver) {
        super(lexer);
        this.colors = new HashMap<>();
        this.table = table;
        this.driver = driver;
    }

    public void syntax_error(Symbol symbol) {
        System.out.println("error sintactico en: " + symbol.sym);
        Error error = new Error(symbol.right,(symbol.left - 1), "Sintactico", "Elemento sintactico desconocido: '" + (String)symbol.value + "'.");
        driver.getErrors().add(error);
    }

    public void logic_error(String lexeme, int line, int column, int type) {
        Error error = null;
        String message;
        switch(type) {
            case 0:
                message = "Ya existe un color con el identificador: " + lexeme + ", el color sera descartado.";
                error = new Error(line,column, "Semantico", message);
            break;
            case 1:
                message = "No existe un lienzo con el identificador: " + lexeme + 
                            ", todos los colores de dicho identificador seran descartados.";
                error = new Error(line,column, "Semantico", message);
            break;
        }
        driver.getErrors().add(error);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ColorsParser$actions {
  private final ColorsParser parser;

  /** Constructor */
  CUP$ColorsParser$actions(ColorsParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ColorsParser$do_action_part00000000(
    int                        CUP$ColorsParser$act_num,
    java_cup.runtime.lr_parser CUP$ColorsParser$parser,
    java.util.Stack            CUP$ColorsParser$stack,
    int                        CUP$ColorsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ColorsParser$result;

      /* select the action based on the action number */
      switch (CUP$ColorsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starting EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-1)).value;
		RESULT = start_val;
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-1)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ColorsParser$parser.done_parsing();
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starting ::= CURLYBRACKETO colorsStructure CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("starting",0, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // colorsStructure ::= COLORES COLON CURLYBRACKETO canvasColors CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("colorsStructure",1, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-4)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-3)).value;
   if(table.get(id) == null) {
                            logic_error(id, idleft-1, idright, 1);
                        } else {
                            driver.addColors(id, colors);
                            colors = new HashMap<>();
                        }
                   
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("NT$0",15, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // canvasColors ::= ID COLON CURLYBRACKETO specificColor NT$0 endingCanvas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-5)).value;

              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("canvasColors",2, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-5)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
 if(colors.get(id) == null) {
                        colors.put(id, new CanvasColor(id, color));
                      } else {
                        logic_error(id, idleft-1, idright, 0);
                      }
                   
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("NT$1",16, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // specificColor ::= ID COLON CURLYBRACKETO tone NT$1 anotherColor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).value;

              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("specificColor",5, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-5)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // specificColor ::= error anotherColor 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-1)).value;
		 syntax_error((Symbol) e); 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("specificColor",5, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-1)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tone ::= rgbCode 
            {
              Color RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = color; 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("tone",11, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tone ::= hexCode 
            {
              Color RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = color; 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("tone",11, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // rgbCode ::= red COMMA redPermutations 
            {
              Color RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = new Color(red, color.getGreen(), color.getBlue()); 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("rgbCode",10, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // rgbCode ::= green COMMA greenPermutations 
            {
              Color RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = new Color(color.getRed(), green, color.getBlue()); 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("rgbCode",10, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rgbCode ::= blue COMMA bluePermutations 
            {
              Color RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = new Color(color.getRed(), color.getGreen(), blue); 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("rgbCode",10, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // red ::= RED COLON INT 
            {
              Integer RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = integer; 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("red",12, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // green ::= GREEN COLON INT 
            {
              Integer RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = integer; 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("green",13, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // blue ::= BLUE COLON INT 
            {
              Integer RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = integer; 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("blue",14, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // redPermutations ::= green COMMA blue 
            {
              Color RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).value;
		int blueleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = new Color(0, green, blue); 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("redPermutations",7, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // redPermutations ::= blue COMMA green 
            {
              Color RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).value;
		int greenleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = new Color(0, green, blue); 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("redPermutations",7, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // greenPermutations ::= red COMMA blue 
            {
              Color RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).value;
		int blueleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = new Color(red, 0, blue); 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("greenPermutations",8, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // greenPermutations ::= blue COMMA red 
            {
              Color RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).value;
		int redleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = new Color(red, 0, blue); 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("greenPermutations",8, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bluePermutations ::= green COMMA red 
            {
              Color RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).value;
		int redleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = new Color(red, green, 0); 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("bluePermutations",9, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bluePermutations ::= red COMMA green 
            {
              Color RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)).value;
		int greenleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = new Color(red, green, 0); 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("bluePermutations",9, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // hexCode ::= HEX COLON HEXCODE 
            {
              Color RESULT =null;
		int hexcodeleft = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).left;
		int hexcoderight = ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()).right;
		String hexcode = (String)((java_cup.runtime.Symbol) CUP$ColorsParser$stack.peek()).value;
		 RESULT = Color.decode(hexcode); 
              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("hexCode",6, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // anotherColor ::= CURLYBRACKETC COMMA specificColor 
            {
              Object RESULT =null;

              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("anotherColor",3, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // anotherColor ::= CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("anotherColor",3, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // endingCanvas ::= CURLYBRACKETC COMMA canvasColors 
            {
              Object RESULT =null;

              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("endingCanvas",4, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.elementAt(CUP$ColorsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // endingCanvas ::= CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$ColorsParser$result = parser.getSymbolFactory().newSymbol("endingCanvas",4, ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ColorsParser$stack.peek()), RESULT);
            }
          return CUP$ColorsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ColorsParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ColorsParser$do_action(
    int                        CUP$ColorsParser$act_num,
    java_cup.runtime.lr_parser CUP$ColorsParser$parser,
    java.util.Stack            CUP$ColorsParser$stack,
    int                        CUP$ColorsParser$top)
    throws java.lang.Exception
    {
              return CUP$ColorsParser$do_action_part00000000(
                               CUP$ColorsParser$act_num,
                               CUP$ColorsParser$parser,
                               CUP$ColorsParser$stack,
                               CUP$ColorsParser$top);
    }
}

}
