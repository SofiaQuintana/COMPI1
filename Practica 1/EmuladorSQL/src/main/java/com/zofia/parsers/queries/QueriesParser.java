
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.zofia.parsers.queries;

import java_cup.runtime.Symbol;
import com.zofia.lexer.QueryLexer;
import javax.swing.JTextArea;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class QueriesParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public QueriesParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public QueriesParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public QueriesParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\004" +
    "\000\002\003\005\000\002\003\006\000\002\004\013\000" +
    "\002\004\010\000\002\005\011\000\002\005\010\000\002" +
    "\006\005\000\002\006\004\000\002\013\003\000\002\013" +
    "\004\000\002\010\003\000\002\010\003\000\002\007\006" +
    "\000\002\007\007\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\006\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\014\003\006\004\007\006\005\007\011\011" +
    "\010\001\002\000\004\002\106\001\002\000\004\012\064" +
    "\001\002\000\004\023\063\001\002\000\004\024\055\001" +
    "\002\000\004\012\050\001\002\000\004\012\012\001\002" +
    "\000\004\025\015\001\002\000\004\023\014\001\002\000" +
    "\004\002\ufffe\001\002\000\004\010\016\001\002\000\004" +
    "\024\017\001\002\000\004\022\020\001\002\000\006\026" +
    "\023\033\022\001\002\000\006\005\024\023\ufff6\001\002" +
    "\000\014\005\ufff0\013\ufff0\014\ufff0\023\ufff0\030\ufff0\001" +
    "\002\000\014\005\ufff1\013\ufff1\014\ufff1\023\ufff1\030\ufff1" +
    "\001\002\000\004\024\026\001\002\000\004\023\ufff7\001" +
    "\002\000\016\015\034\016\032\017\027\020\030\021\035" +
    "\022\033\001\002\000\006\026\uffea\033\uffea\001\002\000" +
    "\006\026\uffe9\033\uffe9\001\002\000\006\026\023\033\022" +
    "\001\002\000\006\026\uffeb\033\uffeb\001\002\000\006\026" +
    "\uffed\033\uffed\001\002\000\006\026\uffec\033\uffec\001\002" +
    "\000\006\026\uffe8\033\uffe8\001\002\000\010\013\040\014" +
    "\041\023\uffef\001\002\000\004\023\uffee\001\002\000\004" +
    "\024\045\001\002\000\004\024\042\001\002\000\016\015" +
    "\034\016\032\017\027\020\030\021\035\022\033\001\002" +
    "\000\006\026\023\033\022\001\002\000\004\023\uffe6\001" +
    "\002\000\016\015\034\016\032\017\027\020\030\021\035" +
    "\022\033\001\002\000\006\026\023\033\022\001\002\000" +
    "\004\023\uffe7\001\002\000\004\025\053\001\002\000\004" +
    "\023\052\001\002\000\004\002\ufffd\001\002\000\006\005" +
    "\024\023\ufff4\001\002\000\004\023\ufff5\001\002\000\004" +
    "\012\060\001\002\000\004\023\057\001\002\000\004\002" +
    "\000\001\002\000\004\025\061\001\002\000\006\005\024" +
    "\023\ufffb\001\002\000\004\023\ufffa\001\002\000\004\002" +
    "\ufffc\001\002\000\004\025\067\001\002\000\004\023\066" +
    "\001\002\000\004\002\uffff\001\002\000\006\027\070\031" +
    "\071\001\002\000\004\024\100\001\002\000\004\027\072" +
    "\001\002\000\010\026\023\032\073\033\022\001\002\000" +
    "\006\026\023\033\022\001\002\000\004\030\ufff3\001\002" +
    "\000\004\030\076\001\002\000\004\023\ufff8\001\002\000" +
    "\004\030\ufff2\001\002\000\004\030\101\001\002\000\004" +
    "\031\102\001\002\000\004\027\103\001\002\000\010\026" +
    "\023\032\073\033\022\001\002\000\004\030\105\001\002" +
    "\000\004\023\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\004\064\001\001\000\002\001\001\000\004\003\055" +
    "\001\001\000\004\006\050\001\001\000\004\005\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\020\001\001\000\004\007\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\042\001\001\000\004\010\043" +
    "\001\001\000\002\001\001\000\004\011\045\001\001\000" +
    "\004\010\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\073\013\074" +
    "\001\001\000\004\010\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\073\013\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$QueriesParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$QueriesParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$QueriesParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private JTextArea area;

    public QueriesParser(QueryLexer lexer, JTextArea textArea) {
        super(lexer);
        this.area = textArea;
    }

    public void setAction(String type) {
        this.area.append("->" + type + " realizada con exito");
    }

    public void syntax_error(Symbol symbol) {
        this.area.append("error sintaxis en: " + symbol.value + " " + symbol.sym + " " + sym.terminalNames[symbol.sym] + "\n"
                        +"linea: " + symbol.left + " columna: " + symbol.right + "\n");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$QueriesParser$actions {
  private final QueriesParser parser;

  /** Constructor */
  CUP$QueriesParser$actions(QueriesParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$QueriesParser$do_action_part00000000(
    int                        CUP$QueriesParser$act_num,
    java_cup.runtime.lr_parser CUP$QueriesParser$parser,
    java.util.Stack            CUP$QueriesParser$stack,
    int                        CUP$QueriesParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$QueriesParser$result;

      /* select the action based on the action number */
      switch (CUP$QueriesParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruction EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-1)).value;
		RESULT = start_val;
              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-1)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$QueriesParser$parser.done_parsing();
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instruction ::= SELECCIONAR selection SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)).value;
		 setAction(e); 
              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruction ::= INSERTAR insert SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)).value;
		 setAction(e); 
              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= ACTUALIZAR update SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)).value;
		setAction(e);
              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= ELIMINAR delete SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)).value;
		 setAction(e); 
              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= error SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-1)).value;
		 syntax_error((Symbol) e); 
              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-1)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // selection ::= COLUMN EN PATH 
            {
              Object RESULT =null;
		
              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("selection",1, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // selection ::= COLUMN EN PATH filter 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("selection",1, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-3)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // insert ::= EN PATH OPARENTESIS COLUMN CPARENTESIS VALORES OPARENTESIS valuesStructure CPARENTESIS 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("insert",2, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-8)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // insert ::= EN PATH VALORES OPARENTESIS valuesStructure CPARENTESIS 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("insert",2, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-5)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // update ::= EN PATH ASIGNAR COLUMN EQUAL values filter 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("update",3, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-6)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // update ::= EN PATH ASIGNAR COLUMN EQUAL values 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("update",3, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-5)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // delete ::= EN PATH filter 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("delete",4, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-2)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // delete ::= EN PATH 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("delete",4, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-1)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valuesStructure ::= values 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("valuesStructure",9, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valuesStructure ::= COMMA values 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("valuesStructure",9, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-1)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // values ::= ASSIGNATION 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("values",6, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // values ::= NUMBER 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("values",6, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // filter ::= FILTRAR COLUMN relationalOperations values 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("filter",5, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-3)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // filter ::= FILTRAR COLUMN relationalOperations values logicalOperations 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("filter",5, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-4)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // relationalOperations ::= EQUAL 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("relationalOperations",7, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // relationalOperations ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("relationalOperations",7, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // relationalOperations ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("relationalOperations",7, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // relationalOperations ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("relationalOperations",7, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // relationalOperations ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("relationalOperations",7, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // relationalOperations ::= DIFERENTEDE 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("relationalOperations",7, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logicalOperations ::= AND COLUMN relationalOperations values 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("logicalOperations",8, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-3)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logicalOperations ::= OR COLUMN relationalOperations values 
            {
              Object RESULT =null;

              CUP$QueriesParser$result = parser.getSymbolFactory().newSymbol("logicalOperations",8, ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.elementAt(CUP$QueriesParser$top-3)), ((java_cup.runtime.Symbol)CUP$QueriesParser$stack.peek()), RESULT);
            }
          return CUP$QueriesParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$QueriesParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$QueriesParser$do_action(
    int                        CUP$QueriesParser$act_num,
    java_cup.runtime.lr_parser CUP$QueriesParser$parser,
    java.util.Stack            CUP$QueriesParser$stack,
    int                        CUP$QueriesParser$top)
    throws java.lang.Exception
    {
              return CUP$QueriesParser$do_action_part00000000(
                               CUP$QueriesParser$act_num,
                               CUP$QueriesParser$parser,
                               CUP$QueriesParser$stack,
                               CUP$QueriesParser$top);
    }
}

}
