/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zofia.frontend;

import com.zofia.drivers.FileDriver;
import com.zofia.lexers.LexerIDE;
import com.zofia.lexers.Node;
import com.zofia.parsers.parser;
import java.awt.Panel;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import com.zofia.drivers.TreeDriver;
import com.zofia.lexer.QueryLexer;
import com.zofia.parsers.queries.QueriesParser;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.tree.TreePath;
/**
 *
 * @author zofia
 */
public class PrincipalFrame extends javax.swing.JFrame {
    /**
     * Creates new form PrincipalFrame
     */
    private DefaultTreeModel treeModel = null;
    private DefaultMutableTreeNode location = null;
    private DefaultMutableTreeNode root = null;
    private Node node = null;
    private String pathIdeFile;
    private QueryLexer queryLexer;
    private QueriesParser parser;
    private LexerIDE lexerIDE;
    private parser parserIDE;
    private FileDriver fileDriver = new FileDriver();
    private List<Node> nodes = new ArrayList<>();
    private TreeDriver treeDriver;
    private String selectedContent = "";
    private String actualIde = "";
    
    public PrincipalFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        consolePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        label = new javax.swing.JLabel();
        scrollPanel = new javax.swing.JScrollPane();
        tabbedPanel = new javax.swing.JTabbedPane();
        bar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        projectMenu = new javax.swing.JMenu();
        newProjectMenu = new javax.swing.JMenuItem();
        openMenu = new javax.swing.JMenuItem();
        closeItem = new javax.swing.JMenuItem();
        fileMenu = new javax.swing.JMenu();
        createFileItem = new javax.swing.JMenuItem();
        folderMenu = new javax.swing.JMenu();
        createFolderItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(873, 649));

        tree.setModel(treeModel);
        tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tree);

        console.setColumns(20);
        console.setRows(5);
        console.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consoleMouseClicked(evt);
            }
        });
        console.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                consoleKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(console);

        javax.swing.GroupLayout consolePanelLayout = new javax.swing.GroupLayout(consolePanel);
        consolePanel.setLayout(consolePanelLayout);
        consolePanelLayout.setHorizontalGroup(
            consolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        consolePanelLayout.setVerticalGroup(
            consolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
        );

        label.setText("Consola:");

        tabbedPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabbedPanelMouseClicked(evt);
            }
        });
        scrollPanel.setViewportView(tabbedPanel);

        jMenu1.setText("File");

        projectMenu.setText("Project");

        newProjectMenu.setText("New Project");
        newProjectMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectMenuActionPerformed(evt);
            }
        });
        projectMenu.add(newProjectMenu);

        openMenu.setText("Open Project");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        projectMenu.add(openMenu);

        closeItem.setText("Close Project");
        closeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeItemActionPerformed(evt);
            }
        });
        projectMenu.add(closeItem);

        jMenu1.add(projectMenu);

        fileMenu.setText("File");

        createFileItem.setText("Create File");
        createFileItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createFileItemActionPerformed(evt);
            }
        });
        fileMenu.add(createFileItem);

        jMenu1.add(fileMenu);

        folderMenu.setText("Folder");

        createFolderItem.setText("Create Folder");
        folderMenu.add(createFolderItem);

        jMenu1.add(folderMenu);

        bar.add(jMenu1);

        jMenu2.setText("Edit");
        bar.add(jMenu2);

        setJMenuBar(bar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(consolePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrollPanel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPanel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(consolePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        // TODO add your handling code here:
        if(treeModel != null) {
            JOptionPane.showMessageDialog(this, "Cierre el proyecto abierto", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle("Open .ide file");
            if(chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                this.pathIdeFile = chooser.getSelectedFile().getAbsolutePath();
                try {
                    this.actualIde = fileDriver.readInputFile(pathIdeFile);
                    addPanel(actualIde, chooser.getSelectedFile().getName());
                    this.lexerIDE = new LexerIDE(new StringReader(actualIde), this);
                    this.parserIDE = new parser(lexerIDE, this.console);
                    this.parserIDE.parse();
                    buildTree(this.parserIDE.getList());
                } catch (IOException ex) {
                    Logger.getLogger(PrincipalFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                } 
            }
        }
    }//GEN-LAST:event_openMenuActionPerformed

    private void newProjectMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newProjectMenuActionPerformed

    private void closeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeItemActionPerformed
        // TODO add your handling code here:
        if(treeModel == null) {
            JOptionPane.showMessageDialog(this, "No tiene ningun proyecto abierto", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            this.treeModel = null;
            this.tree.setModel(treeModel);
            this.tabbedPanel.removeAll();
            this.fileDriver.cleanFileContent();
            this.actualIde = "";
        }
    }//GEN-LAST:event_closeItemActionPerformed

    private void treeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMouseClicked
        // TODO add your handling code here:
        String path;
        fileDriver.cleanFileContent();
        if(evt.getClickCount() == 2) {
            node = getSelectedNode(evt.getX(), evt.getY());
            path = node.getPath();
            try {
                addPanel(fileDriver.readInputFile(path), node.getName());
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        } else if(evt.getClickCount() == 1) {
            node = getSelectedNode(evt.getX(), evt.getY());
            System.out.println("Nodo seleccionado!");
        }
    }//GEN-LAST:event_treeMouseClicked

    private void tabbedPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabbedPanelMouseClicked
        // TODO add your handling code here:
        JTextArea selectedTextArea = (JTextArea) this.tabbedPanel.getSelectedComponent();
        this.selectedContent = selectedTextArea.getText();
        System.out.println(selectedContent);
    }//GEN-LAST:event_tabbedPanelMouseClicked

    private void createFileItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createFileItemActionPerformed
        // TODO add your handling code here:
        String name = JOptionPane.showInputDialog(this, "Ingrese el nombre del archivo: ", "Input", JOptionPane.OK_OPTION);
        String path = JOptionPane.showInputDialog(this, "Ingrese el path del archivo: ", "Input", JOptionPane.OK_OPTION);
        Node temporal = new Node("ARCHIVO", name, path);
        String line;
        switch(node.getType()) {
            case "PROYECTO":
                if(!actualIde.contains(name)) {
                    root = (DefaultMutableTreeNode) this.treeModel.getRoot();
                    root.add(treeDriver.createFile(temporal));
                    line = "<ARCHIVO nombre=\"" +name+ "\" ubicacion=\""+path+"\"/>";
                    this.treeModel.setRoot(root);
                    this.tree.setModel(treeModel);
                } else {
                    JOptionPane.showMessageDialog(this, "Este nombre de archivo ya existe en el proyecto.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            break;
            case "CARPETA":
                if(!actualIde.contains(name)){
                    root = (DefaultMutableTreeNode) this.treeModel.getRoot();
                    location.insert(treeDriver.createFile(temporal), location.getIndex(location.getLastChild())+1);
                    this.treeModel.setRoot(root);
                    this.tree.setModel(treeModel);
                }
            break;
            case "ARCHIVO":
            break;
        }
    }//GEN-LAST:event_createFileItemActionPerformed

    private void consoleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consoleMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount() == 1) {
            this.console.append("->");
        }
    }//GEN-LAST:event_consoleMouseClicked

    private void consoleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consoleKeyPressed
        // TODO add your handling code here:
        if(evt.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
            String line = this.console.getText();
            line = line.replaceAll("->", "");
            this.console.setText("");
            try {
                this.queryLexer = new QueryLexer(new StringReader(line),this);
                this.parser = new QueriesParser(queryLexer, console);
                this.parser.parse();
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        } else {
            System.out.println("Escribiendo...");
        }
    }//GEN-LAST:event_consoleKeyPressed

    public void printLexicalError(String value, int line, int column) {
        this.console.append("Error lexico en linea: " + line + ", columna: " + column + ", lexema: " + value + "\n");
    }
    
    public void addPanel(String content, String name) {
        this.tabbedPanel.add(name, new Panel().add(new JTextArea(content)));
    }
    
    public void buildTree(List<Node> nodes) {
        setNodes(nodes);
        this.treeDriver = new TreeDriver(nodes);
        this.treeModel = new DefaultTreeModel(this.treeDriver.getRoot());
        if(nodes.size() > 1) {
            this.treeDriver.createTree(treeModel);
        } 
        this.tree.setModel(treeModel);
    }

    public void setNodes(List<Node> nodes) {
        this.nodes = nodes;
    }
    
    public Node getSelectedNode(int x, int y) {
        Node temporal;
        TreePath treePath = tree.getClosestPathForLocation(x, y);
        location = (DefaultMutableTreeNode) treePath.getLastPathComponent();
        temporal = (Node) location.getUserObject();
        return temporal;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar bar;
    private javax.swing.JMenuItem closeItem;
    private javax.swing.JTextArea console;
    private javax.swing.JPanel consolePanel;
    private javax.swing.JMenuItem createFileItem;
    private javax.swing.JMenuItem createFolderItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu folderMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label;
    private javax.swing.JMenuItem newProjectMenu;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JMenu projectMenu;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables

}
