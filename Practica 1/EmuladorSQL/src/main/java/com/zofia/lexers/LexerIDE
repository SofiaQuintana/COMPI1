package com.zofia.lexers;
import java_cup.runtime.*;
import com.zofia.parsers.sym;
import com.zofia.frontend.PrincipalFrame;


%%// area break

%public
%class LexerIDE
%cup
%cupdebug
%line
%column

/* Identifiers */
Letter = [a-zA-Z]
Sign = [-_@+*#]
Number = [0-9]
LineTerminator = \r|\n|\r\n 
WhiteSpace = {LineTerminator} | [ \t\f\b]
Identifier = ({Letter}|{Number}|{Sign})({Letter}|{Number}|{Sign}|" ")*
Name = ("\"")({Identifier})+("\"")
Path = ("/")({Identifier})({Identifier}|"/")*({Identifier})(".csv")

%{
    private PrincipalFrame frame;

    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    private void error(String value, int line, int column) {
        frame.printLexicalError(value, line+1, column+1);
    }
    
    public LexerIDE(java.io.Reader in, PrincipalFrame frame) {
        this.zzReader = in;
        this.frame = frame;
    }

    private void printToken(String token){
        System.out.println(token);
    }
%}

%%//Area break

/* Rules Area */
<YYINITIAL> {
    /* Keywords */
    "PROYECTO"              {printToken("PROYECTO"); return symbol(sym.PROYECTO, "PROYECTO");}
    "CARPETA"               {printToken("CARPETA"); return symbol(sym.CARPETA, "CARPETA");}
    "ARCHIVO"               {printToken("ARCHIVO"); return symbol(sym.ARCHIVO, "ARCHIVO");}
    "nombre"                {printToken("nombre"); return symbol(sym.NOMBRE, "nombre");}
    "ubicacion"             {printToken("ubicacion"); return symbol(sym.UBICACION, "ubicacion");}
    /* Operators */
    "<"                     {printToken("<"); return symbol(sym.MENORQUE, "<");}
    ">"                     {printToken(">"); return symbol(sym.MAYORQUE, ">");}
    "="                     {printToken("="); return symbol(sym.EQUAL, "=");}
    /* Signs */
    "\""                    {printToken("\""); return symbol(sym.COMILLADOBLE, "\"");}
    "/"                     {printToken("/"); return symbol(sym.SLASH, "/");}
    /* Others */
    {Name}                  {printToken(yytext()); return symbol(sym.ID, yytext());}
    {Path}                  {printToken(yytext()); return symbol(sym.PATH, yytext());} 
    {WhiteSpace}            {/*do nothing*/}
    .                       {printToken("ERROR"); error(yytext(), yyline, yycolumn); }
}

    <<EOF>>                 { return symbol(EOF); }
