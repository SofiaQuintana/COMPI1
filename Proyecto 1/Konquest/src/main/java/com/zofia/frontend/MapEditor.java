/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zofia.frontend;

import com.zofia.dummyclasses.Map;
import com.zofia.dummyclasses.Neutral;
import com.zofia.dummyclasses.Planet;
import com.zofia.dummyclasses.Player;
import com.zofia.lexers.JSONLexer;
import com.zofia.mapstructure.FileDriver;
import com.zofia.mapstructure.GameDriver;
import com.zofia.mapstructure.MapDriver;
import com.zofia.mapstructure.StructureDriver;
import com.zofia.parsers.JSON.JSONParser;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.observablecollections.ObservableList;

/**
 *
 * @author zofia
 */
public class MapEditor extends javax.swing.JDialog {
    private List<Player> players;
    private List<Player> observablePlayers;
    private ObservableList<Player> observable;
    private JSONParser parser;
    private JSONLexer lexer;
    private String path;
    private String file;
    private StructureDriver mapStructure;
    private boolean fileSelected;
    private FileDriver fileDriver;
    private MessageStructure structure;
    private MapDriver map;
    private List<Planet> planets;
    /**
     * Creates new form MapEdition
     * @param player
     */
    public MapEditor(java.awt.Frame parent) {
        super(parent);
        setModal(true);
        this.players = new ArrayList<>();
        this.observablePlayers = new ArrayList<>();
        this.observable = ObservableCollections.observableList(observablePlayers);
        initComponents();
        this.fileDriver = new FileDriver();
        this.structure = new MessageStructure();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        playersPanel = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        playersTable = new javax.swing.JTable();
        addBox = new javax.swing.JComboBox<>();
        removeButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        mapPanel = new javax.swing.JPanel();
        neutralLabel = new javax.swing.JLabel();
        widthLabel = new javax.swing.JLabel();
        heightLabel = new javax.swing.JLabel();
        neutralSpinner = new javax.swing.JSpinner();
        widthSpinner = new javax.swing.JSpinner();
        heightSpinner = new javax.swing.JSpinner();
        randomBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        endingSpinner = new javax.swing.JSpinner();
        optionsPanel = new javax.swing.JPanel();
        blindCheck = new javax.swing.JCheckBox();
        cumulativeCheck = new javax.swing.JCheckBox();
        neutralsPanel = new javax.swing.JPanel();
        shipsCheck = new javax.swing.JCheckBox();
        statsCheck = new javax.swing.JCheckBox();
        productionLabel = new javax.swing.JLabel();
        productionSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        fileButton = new javax.swing.JButton();
        acceptButton = new javax.swing.JButton();

        setTitle("Edit Map --- Konquest");

        playersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Players", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(0, 0, 0))); // NOI18N

        playersTable.getTableHeader().setReorderingAllowed(false);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${observable}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, playersTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${name}"));
        columnBinding.setColumnName("Player");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${type}"));
        columnBinding.setColumnName("Type");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        scroll.setViewportView(playersTable);

        addBox.setBackground(new java.awt.Color(255, 255, 255));
        addBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        addBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add", "HUMANO", "FACIL", "DIFICIL" }));
        addBox.setOpaque(false);

        removeButton.setBackground(new java.awt.Color(255, 255, 255));
        removeButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        addButton.setBackground(new java.awt.Color(255, 255, 255));
        addButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout playersPanelLayout = new javax.swing.GroupLayout(playersPanel);
        playersPanel.setLayout(playersPanelLayout);
        playersPanelLayout.setHorizontalGroup(
            playersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(playersPanelLayout.createSequentialGroup()
                        .addComponent(addBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        playersPanelLayout.setVerticalGroup(
            playersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(playersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton)
                    .addComponent(removeButton))
                .addGap(43, 43, 43))
        );

        mapPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Map", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        mapPanel.setPreferredSize(new java.awt.Dimension(264, 347));

        neutralLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        neutralLabel.setText("Neutral Planets:");

        widthLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        widthLabel.setText("Width:");

        heightLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        heightLabel.setText("Height:");

        neutralSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        neutralSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        neutralSpinner.setOpaque(false);

        widthSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        heightSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        randomBox.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        randomBox.setText("Al azar");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Ending:");

        endingSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mapPanelLayout.createSequentialGroup()
                        .addComponent(heightLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(heightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(randomBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mapPanelLayout.createSequentialGroup()
                            .addGroup(mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(neutralLabel)
                                .addComponent(widthLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(neutralSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(widthSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(mapPanelLayout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(endingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(neutralLabel)
                    .addComponent(neutralSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(widthLabel)
                    .addComponent(widthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heightLabel)
                    .addComponent(heightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(endingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(randomBox)
                .addGap(17, 17, 17))
        );

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Options", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Dialog", 0, 12))); // NOI18N
        optionsPanel.setPreferredSize(new java.awt.Dimension(264, 347));

        blindCheck.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        blindCheck.setText("Blind Map");

        cumulativeCheck.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cumulativeCheck.setText("Cumulative Production");

        neutralsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Neutrals", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Dialog", 0, 12))); // NOI18N

        shipsCheck.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        shipsCheck.setText("Show Ships");

        statsCheck.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        statsCheck.setText("Show Stats");

        productionLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        productionLabel.setText("Production:");

        productionSpinner.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        javax.swing.GroupLayout neutralsPanelLayout = new javax.swing.GroupLayout(neutralsPanel);
        neutralsPanel.setLayout(neutralsPanelLayout);
        neutralsPanelLayout.setHorizontalGroup(
            neutralsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(neutralsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(neutralsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(neutralsPanelLayout.createSequentialGroup()
                        .addComponent(productionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(productionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(neutralsPanelLayout.createSequentialGroup()
                        .addGroup(neutralsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statsCheck)
                            .addComponent(shipsCheck))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        neutralsPanelLayout.setVerticalGroup(
            neutralsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(neutralsPanelLayout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(shipsCheck)
                .addGap(29, 29, 29)
                .addComponent(statsCheck)
                .addGap(36, 36, 36)
                .addGroup(neutralsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productionLabel)
                    .addComponent(productionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
        );

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(neutralsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(blindCheck)
                            .addComponent(cumulativeCheck))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(blindCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cumulativeCheck)
                .addGap(18, 18, 18)
                .addComponent(neutralsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("Create map by JSON file:");

        fileButton.setBackground(new java.awt.Color(255, 255, 255));
        fileButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        fileButton.setText("Select file");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        acceptButton.setBackground(new java.awt.Color(255, 255, 255));
        acceptButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        acceptButton.setText("Ok");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(playersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileButton)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(acceptButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        // TODO add your handling code here:
        this.file = "";
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Open JSON file");
        if(chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            this.path = chooser.getSelectedFile().getPath();
            try {
                doParsing(path);
                fileSelected = true;
            } catch (IOException ex) {
                System.out.println("No se encontro el archivo");
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_fileButtonActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        // TODO add your handling code here:
        if(fileSelected) {
            verifyMapValues();
            verifyMapValues();
            verifyNeutralValues();
        } else {
            this.mapStructure = new StructureDriver();
            String id = JOptionPane.showInputDialog(this, "Ingrese 'id' del mapa.");
            //------------------------asignacion de datos en entidad mapa---------------------------------
            mapStructure.setMap(new Map(id, (int) heightSpinner.getValue(), (int) widthSpinner.getValue(), 
                    randomBox.isSelected(), (int) neutralSpinner.getValue(), blindCheck.isSelected(), 
                    cumulativeCheck.isSelected(), (int) endingSpinner.getValue()));
            //------------------------asignacion de atributos neutrales-------------------------------------------------
            mapStructure.setNeutral(new Neutral(shipsCheck.isSelected(), statsCheck.isSelected(), (int) productionSpinner.getValue()));
            map = new MapDriver(mapStructure.getMap(), mapStructure.getNeutral().getProduction(), players);
            //------------------------creacion de planetas----------------------------------------------------------------------
            planets = map.CreatePlanetsForUIMap();
            mapStructure.setPlanets(planets);
            mapStructure.setPlayers(players);
            JFileChooser saver = new JFileChooser();
            saver.showSaveDialog(this);
            saver.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if(saver.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                try {
                    this.path = saver.getSelectedFile().toString();
                    fileDriver.writeMapFile(path, mapStructure.getMap(), mapStructure.getNeutral(), planets, players);
                    path += "/" + mapStructure.getMap().getId() + ".json";
                    doParsing(path);
                } catch (IOException ex) {
                    Logger.getLogger(MapEditor.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(MapEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        this.dispose();
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        String name = JOptionPane.showInputDialog("Ingrese nombre del jugador, no se permiten nombres repetidos.");
        try {
            verifyPlayerName(name);
            String type = (String) addBox.getModel().getSelectedItem();
            this.players.add(new Player(name, new ArrayList<Planet>(), type, Color.BLACK));
            refreshObservableList(players);
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        int column = playersTable.getSelectedColumn();
        int row = playersTable.getSelectedRow();
        String name = this.playersTable.getModel().getValueAt(row, column).toString();
        for (int i = 0; i < players.size(); i++) {
            Player player = players.get(i);
            if(player.getName().equals(name)) {
                players.remove(i);
            }
        }
        refreshObservableList(players);
    }//GEN-LAST:event_removeButtonActionPerformed

    public String verifyPlayerName(String name) throws Exception {
        if(players.size() > 1) {
            for(Player player : players) {
                if(player.getName().equals(name)) {
                    throw new Exception("Debe ingresar un nombre que no sea repetido.");
                } else {
                    if(name.length() > 10) {
                        throw new Exception("El nombre del jugador no debe sobrepasar los 10 caracteres.");
                    } else {
                        return name;
                    }
                }
            }
        } 
        return name;
    }
    
    public void doParsing(String path) throws Exception {
        this.file = fileDriver.readInputFile(path);
        this.lexer = new JSONLexer(new StringReader(file), (PrincipalFrame) this.getParent());
        this.parser = new JSONParser(lexer, (PrincipalFrame) this.getParent());
        this.parser.parse();
        //Obtiene datos a usar en el frame principal relacionados al funcionamiento del juego.
        this.mapStructure = parser.getStructure();
        this.players = mapStructure.getPlayers();
        //Coloca los datos obtenidos en la UI.
        setValues();
    }
    
    public void verifyOptionalValues() {
        if(blindCheck.isSelected() != mapStructure.getMap().isBlindMap()) {
            mapStructure.getMap().setBlindMap(blindCheck.isSelected());
        }
        if(cumulativeCheck.isSelected() != mapStructure.getMap().isAccumulate()) {
            mapStructure.getMap().setAccumulate(cumulativeCheck.isSelected());
        }
    }
    
    public void verifyNeutralValues() {
        if(shipsCheck.isSelected() != mapStructure.getNeutral().isShowSpaceships()) {
            mapStructure.getNeutral().setShowSpaceships(shipsCheck.isSelected());
        }
        if(statsCheck.isSelected() != mapStructure.getNeutral().isShowstadistics()) {
            mapStructure.getNeutral().setShowstadistics(statsCheck.isSelected());
        }
        if((int) productionSpinner.getValue() != mapStructure.getNeutral().getProduction()) {
            mapStructure.getNeutral().setProduction((int) productionSpinner.getValue());
        }
    }
    
    public void verifyMapValues() {
        if((int) widthSpinner.getValue() != mapStructure.getMap().getColumns()) {
            mapStructure.getMap().setColumns((int) widthSpinner.getValue());
        }
        if((int) heightSpinner.getValue() != mapStructure.getMap().getRows()) {
            mapStructure.getMap().setRows((int) heightSpinner.getValue());
        }
        if((int) endingSpinner.getValue() != mapStructure.getMap().getEnding()) {
            mapStructure.getMap().setEnding((int) endingSpinner.getValue());
        }
        if(randomBox.isSelected() != mapStructure.getMap().isRandomMap()) {
            mapStructure.getMap().setRandomMap(randomBox.isSelected());
        }
    }
    
    public void setNeutralQuantity() {
        if(mapStructure.getMap().isRandomMap()) {
            this.neutralSpinner.setValue(mapStructure.getMap().getNeutralPlanets());
        } else {
            this.neutralSpinner.setValue(mapStructure.getPlanets().size());
        }
    }
    
    public void setNeutralAttributes() {
        this.shipsCheck.setSelected(mapStructure.getNeutral().isShowSpaceships());
        this.statsCheck.setSelected(mapStructure.getNeutral().isShowstadistics());
        this.productionSpinner.setValue(mapStructure.getNeutral().getProduction());
    }
    
    public void setValues() {
        refreshObservableList(players);
        setNeutralQuantity();
        this.widthSpinner.setValue(mapStructure.getMap().getColumns());
        this.heightSpinner.setValue(mapStructure.getMap().getRows());
        this.randomBox.setSelected(mapStructure.getMap().isRandomMap());
        this.blindCheck.setSelected(mapStructure.getMap().isBlindMap());
        this.cumulativeCheck.setSelected(mapStructure.getMap().isAccumulate());
        setNeutralAttributes();
        this.endingSpinner.setValue(mapStructure.getMap().getEnding());
    }
    
    public void refreshObservableList(List<Player> players) {
        this.observable.clear();
        this.observable.addAll(players);
    }
    
    public ObservableList<Player> getObservable() {
        return observable;
    }

    public void setObservable(ObservableList<Player> observable) {
        this.observable = observable;
    }

    public StructureDriver getMapStructure() {
        return mapStructure;
    }

    public MapDriver getMap() {
        return map;
    }

    public boolean isFileSelected() {
        return fileSelected;
    }

    public String getPath() {
        return path;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JComboBox<String> addBox;
    private javax.swing.JButton addButton;
    private javax.swing.JCheckBox blindCheck;
    private javax.swing.JCheckBox cumulativeCheck;
    private javax.swing.JSpinner endingSpinner;
    private javax.swing.JButton fileButton;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JSpinner heightSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JLabel neutralLabel;
    private javax.swing.JSpinner neutralSpinner;
    private javax.swing.JPanel neutralsPanel;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JPanel playersPanel;
    private javax.swing.JTable playersTable;
    private javax.swing.JLabel productionLabel;
    private javax.swing.JSpinner productionSpinner;
    private javax.swing.JCheckBox randomBox;
    private javax.swing.JButton removeButton;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JCheckBox shipsCheck;
    private javax.swing.JCheckBox statsCheck;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JSpinner widthSpinner;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
