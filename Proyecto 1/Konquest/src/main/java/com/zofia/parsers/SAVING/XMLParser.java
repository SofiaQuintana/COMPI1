
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.zofia.parsers.SAVING;

import java_cup.runtime.Symbol;
import com.zofia.lexers.XMLlexer;
import com.zofia.mapstructure.LoadStructure;
import com.zofia.frontend.PrincipalFrame;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class XMLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public XMLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public XMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\006\000\002\002" +
    "\007\000\002\003\005\000\002\004\014\000\002\022\002" +
    "\000\002\005\007\000\002\023\002\000\002\005\007\000" +
    "\002\024\002\000\002\005\007\000\002\025\002\000\002" +
    "\005\007\000\002\026\002\000\002\005\007\000\002\005" +
    "\005\000\002\007\014\000\002\010\007\000\002\027\002" +
    "\000\002\011\007\000\002\030\002\000\002\011\007\000" +
    "\002\011\005\000\002\006\003\000\002\006\003\000\002" +
    "\012\024\000\002\013\021\000\002\014\003\000\002\014" +
    "\004\000\002\014\003\000\002\014\006\000\002\015\006" +
    "\000\002\017\006\000\002\031\002\000\002\016\021\000" +
    "\002\020\004\000\002\020\006\000\002\021\003\000\002" +
    "\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\006\003\005\044\006\001\002\000\004\002" +
    "\235\001\002\000\004\044\231\001\002\000\004\005\227" +
    "\001\002\000\004\044\010\001\002\000\004\004\124\001" +
    "\002\000\004\044\012\001\002\000\004\025\051\001\002" +
    "\000\004\044\015\001\002\000\004\002\000\001\002\000" +
    "\004\034\016\001\002\000\004\043\017\001\002\000\004" +
    "\044\020\001\002\000\004\035\022\001\002\000\004\002" +
    "\uffe1\001\002\000\004\026\023\001\002\000\004\046\024" +
    "\001\002\000\004\050\025\001\002\000\004\042\026\001" +
    "\002\000\004\046\027\001\002\000\004\051\030\001\002" +
    "\000\004\036\uffe0\001\002\000\004\036\032\001\002\000" +
    "\004\046\033\001\002\000\010\037\034\040\036\041\035" +
    "\001\002\000\004\045\uffdc\001\002\000\004\045\uffda\001" +
    "\002\000\004\045\uffdb\001\002\000\004\045\040\001\002" +
    "\000\004\043\041\001\002\000\004\044\043\001\002\000" +
    "\006\002\uffdf\044\uffdf\001\002\000\006\035\022\045\046" +
    "\001\002\000\004\044\043\001\002\000\006\002\uffde\044" +
    "\uffde\001\002\000\004\004\047\001\002\000\004\043\050" +
    "\001\002\000\006\002\uffdd\044\uffdd\001\002\000\004\043" +
    "\052\001\002\000\010\031\056\032\054\044\057\001\002" +
    "\000\004\044\uffe6\001\002\000\004\026\106\001\002\000" +
    "\004\044\uffe2\001\002\000\004\026\065\001\002\000\012" +
    "\031\056\032\054\044\057\045\061\001\002\000\004\044" +
    "\uffe4\001\002\000\004\025\063\001\002\000\004\044\uffe5" +
    "\001\002\000\004\043\064\001\002\000\004\044\uffe3\001" +
    "\002\000\004\046\066\001\002\000\004\047\067\001\002" +
    "\000\004\027\070\001\002\000\004\046\071\001\002\000" +
    "\004\052\072\001\002\000\004\023\073\001\002\000\004" +
    "\046\074\001\002\000\004\052\075\001\002\000\004\030" +
    "\076\001\002\000\004\046\077\001\002\000\004\053\100" +
    "\001\002\000\004\033\101\001\002\000\004\046\102\001" +
    "\002\000\004\050\103\001\002\000\004\045\104\001\002" +
    "\000\004\043\105\001\002\000\004\044\uffe8\001\002\000" +
    "\004\046\107\001\002\000\004\047\110\001\002\000\004" +
    "\027\111\001\002\000\004\046\112\001\002\000\004\052" +
    "\113\001\002\000\004\023\114\001\002\000\004\046\115" +
    "\001\002\000\004\052\116\001\002\000\004\030\117\001" +
    "\002\000\004\046\120\001\002\000\004\053\121\001\002" +
    "\000\004\045\122\001\002\000\004\043\123\001\002\000" +
    "\004\044\uffe7\001\002\000\016\006\133\012\130\015\125" +
    "\016\132\017\126\024\127\001\002\000\004\046\223\001" +
    "\002\000\004\046\217\001\002\000\004\046\215\001\002" +
    "\000\004\046\211\001\002\000\004\043\146\001\002\000" +
    "\004\046\140\001\002\000\004\046\134\001\002\000\004" +
    "\051\135\001\002\000\016\006\ufffc\012\ufffc\015\ufffc\016" +
    "\ufffc\017\ufffc\024\ufffc\001\002\000\016\006\133\012\130" +
    "\015\125\016\132\017\126\024\127\001\002\000\004\043" +
    "\ufffb\001\002\000\006\013\142\014\143\001\002\000\016" +
    "\006\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6\024\ufff6\001" +
    "\002\000\024\006\uffe9\012\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\001\002\000\024\006" +
    "\uffea\012\uffea\015\uffea\016\uffea\017\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\001\002\000\016\006\133\012\130\015" +
    "\125\016\132\017\126\024\127\001\002\000\004\043\ufff5" +
    "\001\002\000\004\044\150\001\002\000\004\044\162\001" +
    "\002\000\004\007\151\001\002\000\004\010\152\001\002" +
    "\000\004\046\153\001\002\000\004\052\154\001\002\000" +
    "\004\011\155\001\002\000\004\046\156\001\002\000\004" +
    "\052\157\001\002\000\004\045\160\001\002\000\004\043" +
    "\161\001\002\000\004\044\ufff1\001\002\000\004\020\170" +
    "\001\002\000\004\044\164\001\002\000\004\045\165\001" +
    "\002\000\004\004\166\001\002\000\004\043\167\001\002" +
    "\000\004\044\ufffd\001\002\000\010\021\173\022\174\023" +
    "\172\001\002\000\004\045\207\001\002\000\004\046\205" +
    "\001\002\000\004\046\201\001\002\000\004\046\175\001" +
    "\002\000\006\013\142\014\143\001\002\000\010\021\uffed" +
    "\022\uffed\023\uffed\001\002\000\010\021\173\022\174\023" +
    "\172\001\002\000\004\045\uffec\001\002\000\006\013\142" +
    "\014\143\001\002\000\010\021\uffef\022\uffef\023\uffef\001" +
    "\002\000\010\021\173\022\174\023\172\001\002\000\004" +
    "\045\uffee\001\002\000\004\052\206\001\002\000\004\045" +
    "\uffeb\001\002\000\004\043\210\001\002\000\004\044\ufff0" +
    "\001\002\000\006\013\142\014\143\001\002\000\016\006" +
    "\ufffa\012\ufffa\015\ufffa\016\ufffa\017\ufffa\024\ufffa\001\002" +
    "\000\016\006\133\012\130\015\125\016\132\017\126\024" +
    "\127\001\002\000\004\043\ufff9\001\002\000\004\052\216" +
    "\001\002\000\004\043\ufff2\001\002\000\006\013\142\014" +
    "\143\001\002\000\016\006\ufff4\012\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\024\ufff4\001\002\000\016\006\133\012\130\015" +
    "\125\016\132\017\126\024\127\001\002\000\004\043\ufff3" +
    "\001\002\000\004\052\224\001\002\000\016\006\ufff8\012" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\024\ufff8\001\002\000\016" +
    "\006\133\012\130\015\125\016\132\017\126\024\127\001" +
    "\002\000\004\043\ufff7\001\002\000\004\043\230\001\002" +
    "\000\004\044\ufffe\001\002\000\004\045\232\001\002\000" +
    "\004\004\233\001\002\000\004\043\234\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\006\002\003\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\010" +
    "\001\001\000\002\001\001\000\004\015\012\001\001\000" +
    "\002\001\001\000\004\017\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\043\020" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\043\020\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\052\013\057\014\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\052\013\057\014\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\135\001\001\000\004\005\136\001\001\000\002\001\001" +
    "\000\004\006\140\001\001\000\004\025\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\144\001\001" +
    "\000\002\001\001\000\004\007\146\001\001\000\004\010" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\175\001\001\000\004\030\176\001\001\000\004\011" +
    "\177\001\001\000\002\001\001\000\004\006\201\001\001" +
    "\000\004\027\202\001\001\000\004\011\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\211\001\001\000" +
    "\004\023\212\001\001\000\004\005\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\217\001\001\000\004\026\220\001\001\000\004\005\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\224\001\001\000\004\005\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$XMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private PrincipalFrame principalFrame;
    private LoadStructure structure = new LoadStructure();

    public XMLParser(XMLlexer lexer, PrincipalFrame principalFrame) {
        super(lexer);
       this.principalFrame = principalFrame;
    }

    public void syntax_error(Symbol symbol) {
        this.principalFrame.printSyntaxError(String.valueOf(symbol.value), sym.terminalNames[symbol.sym]);
    }

    public LoadStructure getStructure() {
        return structure;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$XMLParser$actions {
  private final XMLParser parser;

  /** Constructor */
  CUP$XMLParser$actions(XMLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action_part00000000(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$XMLParser$result;

      /* select the action based on the action number */
      switch (CUP$XMLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starting EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		RESULT = start_val;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$XMLParser$parser.done_parsing();
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starting ::= initialEtiquete map planets players 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("starting",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // starting ::= error MENORQUE SLASH MAPA MAYORQUE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).value;
		 syntax_error((Symbol) e); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("starting",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // initialEtiquete ::= MENORQUE JUEGO MAYORQUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("initialEtiquete",1, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // map ::= MENORQUE MAPA mapStructure MAYORQUE size neutrals MENORQUE SLASH MAPA MAYORQUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("map",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-9)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
 structure.setMapValues(d, i, 0); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mapStructure ::= id EQUAL ID NT$0 mapStructure 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("mapStructure",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
 structure.setMapValues(a, "", 0); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("NT$1",17, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // mapStructure ::= alAzar EQUAL boolean NT$1 mapStructure 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).value;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("mapStructure",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
 structure.setMapValues(p, "", Integer.valueOf(i)); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("NT$2",18, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // mapStructure ::= planetasNeutrales EQUAL INTEGER NT$2 mapStructure 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("mapStructure",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
 structure.setMapValues(m, "", 0); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("NT$3",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // mapStructure ::= mapaCiego EQUAL boolean NT$3 mapStructure 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).value;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("mapStructure",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
 structure.setMapValues(a, "", 0); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("NT$4",20, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mapStructure ::= acumular EQUAL boolean NT$4 mapStructure 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).value;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("mapStructure",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mapStructure ::= finalizacion EQUAL INTEGER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		 structure.setMapValues(f, "", Integer.valueOf(i)); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("mapStructure",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // size ::= MENORQUE SIZE filas EQUAL INTEGER columnas EQUAL INTEGER SLASH MAYORQUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
		 structure.setSize(Integer.valueOf(i), Integer.valueOf(e)); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("size",5, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-9)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // neutrals ::= MENORQUE NEUTRALES neutralsStructure SLASH MAYORQUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("neutrals",6, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$5 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
 structure.setNeutralValues(m, 0); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("NT$5",21, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // neutralsStructure ::= mostrarNaves EQUAL boolean NT$5 neutralsStructure 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).value;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("neutralsStructure",7, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
 structure.setNeutralValues(m, 0); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("NT$6",22, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // neutralsStructure ::= mostrarEstadisticas EQUAL boolean NT$6 neutralsStructure 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).value;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("neutralsStructure",7, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // neutralsStructure ::= produccion EQUAL INTEGER 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		 structure.setNeutralValues(p, Integer.valueOf(i)); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("neutralsStructure",7, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolean ::= FALSE 
            {
              Object RESULT =null;
		 structure.setTemporal(false); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boolean",4, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolean ::= TRUE 
            {
              Object RESULT =null;
		 structure.setTemporal(true); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boolean",4, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // conquered ::= CONQUISTADO nombre EQUAL NAME naves EQUAL INTEGER produccion EQUAL INTEGER porcentajeMuertes EQUAL PERCENTAGE propietario EQUAL PLAYER SLASH MAYORQUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-14)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-14)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-14)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-11)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
		 structure.addPlanet(n, Integer.valueOf(i), Integer.valueOf(e), Double.valueOf(p), b); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("conquered",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-17)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // neutral ::= NEUTRAL nombre EQUAL NAME naves EQUAL INTEGER produccion EQUAL INTEGER porcentajeMuertes EQUAL PERCENTAGE SLASH MAYORQUE 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-11)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-11)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
		 structure.addPlanet(n, Integer.valueOf(i), Integer.valueOf(e), Double.valueOf(p), ""); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("neutral",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-14)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // planetStructure ::= conquered 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("planetStructure",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // planetStructure ::= MENORQUE planetStructure 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("planetStructure",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // planetStructure ::= neutral 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("planetStructure",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // planetStructure ::= MENORQUE SLASH PLANETAS MAYORQUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("planetStructure",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // planets ::= MENORQUE PLANETAS MAYORQUE planetStructure 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("planets",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // players ::= MENORQUE JUGADORES MAYORQUE playerAttributes 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("players",13, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$7 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
 structure.setName(p); structure.setColor(i); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("NT$7",23, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // playerAttributes ::= MENORQUE JUGADOR nombre EQUAL PLAYER color EQUAL ID NT$7 tipo EQUAL type SLASH MAYORQUE option 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-10)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-10)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-7)).value;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerAttributes",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-14)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // option ::= playerAttributes option 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("option",14, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // option ::= MENORQUE SLASH MAPA MAYORQUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("option",14, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= HUMANO 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		 structure.setPlayerAttributes(h); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= FACIL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		 structure.setPlayerAttributes(f); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= DIFICIL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		 structure.setPlayerAttributes(d); 
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$XMLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
              return CUP$XMLParser$do_action_part00000000(
                               CUP$XMLParser$act_num,
                               CUP$XMLParser$parser,
                               CUP$XMLParser$stack,
                               CUP$XMLParser$top);
    }
}

}
