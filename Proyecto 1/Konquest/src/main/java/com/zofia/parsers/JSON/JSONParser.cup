package com.zofia.parsers.JSON;
import java_cup.runtime.Symbol;
import com.zofia.lexers.JSONLexer;
import com.zofia.mapstructure.StructureDriver;
import com.zofia.frontend.PrincipalFrame;

parser code {:
    private PrincipalFrame principalFrame;
    private StructureDriver structure = new StructureDriver();

    public JSONParser(JSONLexer lexer, PrincipalFrame principalFrame) {
        super(lexer);
       this.principalFrame = principalFrame;
    }

    public void syntax_error(Symbol symbol) {
        this.principalFrame.printSyntaxError(String.valueOf(symbol.value), sym.terminalNames[symbol.sym]);
    }

    public StructureDriver getStructure() {
        return structure;
    }
:}

/* Terminales... (tokens returned by the scanner) */
terminal String     MAPA, id, tamaño, filas, columnas, alAzar, TRUE, FALSE, planetasNeutrales, mapaCiego,
                    acumular, NEUTRALES, mostrarNaves, mostrarEstadisticas, produccion, finalizacion,
                    PLANETAS, nombre, naves, porcentajeMuertes, PLANETAS_NEUTRALES, JUGADORES, planetas,
                    tipo, HUMANO, FACIL, DIFICIL, CURLYBRACESO, CURLYBRACESC, COLON, COMMA, BRACKETO,
                    BRACKETC, NAME, PLAYER, ID;
terminal String    INTEGER;
terminal String     PERCENTAGE;

/* No Terminales... */
non terminal        starting, mapStructure, sizeStructure, randomMap, boolean, blindMap, 
                    accumulation, neutralStructure, optionalAttributes, showSpaceships, endingAttribute,
                    showStadistics, planetAttributes, planetEnding, planetStructure, planets, neutrals, 
                    players, playerStructure, playerEnding, playerAttributes, ownedPlanets,
                    symbol, type, ending, neutralStructuration, neutralAttributes, neutralOptional,
                    neutralEnding;

/* Grammar */
start with starting;

starting ::= CURLYBRACESO mapStructure optionalAttributes endingAttribute planets neutrals players ending
             | error:e BRACKETC CURLYBRACESC {: syntax_error((Symbol) e); :}
             | error:e mapStructure {: syntax_error((Symbol) e); :}
             | error:e optionalAttributes {: syntax_error((Symbol) e); :}
             ;
mapStructure ::= MAPA COLON CURLYBRACESO id COLON ID:i COMMA sizeStructure
                 {: structure.setMapId(i); :}
                 ;
sizeStructure ::= tamaño COLON CURLYBRACESO filas COLON INTEGER:i COMMA columnas COLON INTEGER:e CURLYBRACESC COMMA
                  {: structure.setMapLimits(Integer.valueOf(i), Integer.valueOf(e)); :}
                  ;
randomMap ::= alAzar:a COLON boolean COMMA planetasNeutrales COLON INTEGER:i COMMA
              {: structure.setOptionalAttributes(a, 0); 
                 structure.setNeutralPlanets(Integer.valueOf(i)); :}
              ;
boolean ::= FALSE {: structure.setTemporal(false); :}
            | TRUE {: structure.setTemporal(true); :}
            ;
blindMap ::= mapaCiego:m COLON boolean COMMA
             {: structure.setOptionalAttributes(m, 0); :}
             ;
accumulation ::= acumular:a COLON boolean COMMA
                 {: structure.setOptionalAttributes(a, 0); :}
                 ;
neutralStructure ::= NEUTRALES COLON CURLYBRACESO showSpaceships showStadistics
                     produccion:p COLON INTEGER:i CURLYBRACESC COMMA
                     {: structure.setNeutrals(p, Integer.valueOf(i)); :}
                     ;
showSpaceships ::= mostrarNaves:m COLON boolean COMMA
                   {: structure.setNeutrals(m, 0); :}
                   ;
showStadistics ::= mostrarEstadisticas:m COLON boolean COMMA
                   {: structure.setNeutrals(m, 0); :}
                   ;
optionalAttributes ::= randomMap optionalAttributes
                       | blindMap optionalAttributes
                       | accumulation optionalAttributes
                       | neutralStructure
                       ;
endingAttribute ::= finalizacion:f COLON INTEGER:i endingAttribute
                    {: structure.setOptionalAttributes(f, Integer.valueOf(i)); :}
                    | CURLYBRACESC COMMA
                    ;
planetAttributes ::= CURLYBRACESO nombre COLON NAME:n COMMA naves COLON INTEGER:i COMMA produccion COLON INTEGER:e COMMA
                     porcentajeMuertes COLON PERCENTAGE:p CURLYBRACESC
                     {: structure.setPlanetAttributes(n, Integer.valueOf(i), Integer.valueOf(e), Double.valueOf(p)); :}
                     | error: e {: ((Symbol) e); :}
                     ;
planetEnding ::= COMMA planetStructure  
                 | BRACKETC COMMA 
                 ;
planetStructure ::= planetAttributes planetEnding;
planets ::= PLANETAS COLON BRACKETO planetStructure;
neutrals ::= PLANETAS_NEUTRALES COLON BRACKETO neutralStructuration;
players ::= JUGADORES COLON BRACKETO playerStructure;
playerStructure ::= playerAttributes playerEnding;
playerEnding ::= COMMA playerStructure
                 | BRACKETC
                 ;
neutralStructuration ::= neutralAttributes neutralEnding
                     ;
neutralAttributes ::= CURLYBRACESO nombre COLON NAME:n COMMA naves COLON INTEGER:i COMMA neutralOptional
                      {: structure.setNeutralPlanets(n, Integer.valueOf(i)); :}
                      ;
neutralOptional ::= produccion COLON INTEGER:i COMMA porcentajeMuertes COLON PERCENTAGE:p CURLYBRACESC
                    {: structure.setProductionAndDeathRate(Integer.valueOf(i), Double.valueOf(p)); :}
                    | porcentajeMuertes COLON PERCENTAGE:p CURLYBRACESC
                    {: structure.setProductionAndDeathRate(-1, Double.valueOf(p)); :}
                    ;
neutralEnding ::= COMMA neutralStructuration
                  | BRACKETC COMMA
                  ;
playerAttributes ::= CURLYBRACESO nombre COLON PLAYER:p {: structure.setPlayerName(p); :} COMMA planetas COLON BRACKETO ownedPlanets
                     ; 
ownedPlanets ::= NAME:n {: structure.setOwnedPlanets(n); :} symbol 
                 ;
symbol ::= COMMA ownedPlanets
           | BRACKETC COMMA tipo COLON type CURLYBRACESC
           ;
type ::= HUMANO:h {: structure.setPlayerAttributes(h); :}
         | FACIL:f {: structure.setPlayerAttributes(f); :}
         | DIFICIL:d {: structure.setPlayerAttributes(d); :}
         ;
ending ::= CURLYBRACESC;