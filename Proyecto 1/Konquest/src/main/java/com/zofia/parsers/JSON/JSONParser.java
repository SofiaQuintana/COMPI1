
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.zofia.parsers.JSON;

import java_cup.runtime.Symbol;
import com.zofia.lexers.JSONLexer;
import com.zofia.mapstructure.StructureDriver;
import com.zofia.frontend.PrincipalFrame;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JSONParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public JSONParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JSONParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSONParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\012\000\002\002" +
    "\005\000\002\003\012\000\002\004\016\000\002\005\012" +
    "\000\002\006\003\000\002\006\003\000\002\007\006\000" +
    "\002\010\006\000\002\011\014\000\002\013\006\000\002" +
    "\015\006\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\003\000\002\014\006\000\002\014\004" +
    "\000\002\016\023\000\002\017\004\000\002\017\004\000" +
    "\002\020\004\000\002\021\006\000\002\022\006\000\002" +
    "\023\006\000\002\024\004\000\002\025\004\000\002\025" +
    "\003\000\002\033\002\000\002\026\014\000\002\034\002" +
    "\000\002\027\005\000\002\030\004\000\002\030\010\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\006\003\005\037\006\001\002\000\004\002" +
    "\226\001\002\000\004\044\224\001\002\000\004\004\010" +
    "\001\002\000\012\011\035\015\037\016\034\017\044\001" +
    "\002\000\004\041\011\001\002\000\004\037\012\001\002" +
    "\000\004\005\013\001\002\000\004\041\014\001\002\000" +
    "\004\047\015\001\002\000\004\042\016\001\002\000\004" +
    "\006\020\001\002\000\012\011\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\001\002\000\004\041\021\001\002\000\004\037\022" +
    "\001\002\000\004\007\023\001\002\000\004\041\024\001" +
    "\002\000\004\050\025\001\002\000\004\042\026\001\002" +
    "\000\004\010\027\001\002\000\004\041\030\001\002\000" +
    "\004\050\031\001\002\000\004\040\032\001\002\000\004" +
    "\042\033\001\002\000\012\011\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\001\002\000\004\041\221\001\002\000\004\041\212" +
    "\001\002\000\012\011\035\015\037\016\034\017\044\001" +
    "\002\000\004\041\206\001\002\000\006\023\073\040\074" +
    "\001\002\000\006\023\ufff1\040\ufff1\001\002\000\012\011" +
    "\035\015\037\016\034\017\044\001\002\000\012\011\035" +
    "\015\037\016\034\017\044\001\002\000\004\041\045\001" +
    "\002\000\004\037\046\001\002\000\004\020\050\001\002" +
    "\000\004\021\057\001\002\000\004\041\051\001\002\000" +
    "\006\012\053\013\054\001\002\000\004\042\055\001\002" +
    "\000\004\042\ufffa\001\002\000\004\042\ufffb\001\002\000" +
    "\004\021\ufff6\001\002\000\004\022\063\001\002\000\004" +
    "\041\060\001\002\000\006\012\053\013\054\001\002\000" +
    "\004\042\062\001\002\000\004\022\ufff5\001\002\000\004" +
    "\041\064\001\002\000\004\050\065\001\002\000\004\040" +
    "\066\001\002\000\004\042\067\001\002\000\006\023\ufff7" +
    "\040\ufff7\001\002\000\006\023\ufff2\040\ufff2\001\002\000" +
    "\006\023\ufff3\040\ufff3\001\002\000\004\024\101\001\002" +
    "\000\004\041\076\001\002\000\004\042\075\001\002\000" +
    "\004\024\uffef\001\002\000\004\050\077\001\002\000\006" +
    "\023\073\040\074\001\002\000\004\024\ufff0\001\002\000" +
    "\004\041\203\001\002\000\004\030\104\001\002\000\004" +
    "\031\137\001\002\000\004\041\105\001\002\000\004\043" +
    "\106\001\002\000\004\037\111\001\002\000\004\031\uffe9" +
    "\001\002\000\006\042\132\044\133\001\002\000\004\025" +
    "\112\001\002\000\004\041\113\001\002\000\004\045\114" +
    "\001\002\000\004\042\115\001\002\000\004\026\116\001" +
    "\002\000\004\041\117\001\002\000\004\050\120\001\002" +
    "\000\004\042\121\001\002\000\004\022\122\001\002\000" +
    "\004\041\123\001\002\000\004\050\124\001\002\000\004" +
    "\042\125\001\002\000\004\027\126\001\002\000\004\041" +
    "\127\001\002\000\004\051\130\001\002\000\004\040\131" +
    "\001\002\000\006\042\uffee\044\uffee\001\002\000\004\037" +
    "\111\001\002\000\004\042\135\001\002\000\006\030\uffeb" +
    "\031\uffeb\001\002\000\006\030\uffec\031\uffec\001\002\000" +
    "\006\030\uffed\031\uffed\001\002\000\004\041\143\001\002" +
    "\000\004\040\142\001\002\000\004\002\000\001\002\000" +
    "\004\002\uffdb\001\002\000\004\043\144\001\002\000\004" +
    "\037\147\001\002\000\004\040\uffe8\001\002\000\006\042" +
    "\200\044\201\001\002\000\004\025\150\001\002\000\004" +
    "\041\151\001\002\000\004\046\152\001\002\000\004\042" +
    "\uffe4\001\002\000\004\042\154\001\002\000\004\032\155" +
    "\001\002\000\004\041\156\001\002\000\004\043\157\001" +
    "\002\000\004\045\161\001\002\000\006\042\uffe3\044\uffe3" +
    "\001\002\000\006\042\uffe2\044\uffe2\001\002\000\006\042" +
    "\163\044\164\001\002\000\004\045\161\001\002\000\004" +
    "\042\166\001\002\000\006\042\uffe1\044\uffe1\001\002\000" +
    "\004\033\167\001\002\000\004\041\170\001\002\000\010" +
    "\034\171\035\173\036\172\001\002\000\004\040\uffde\001" +
    "\002\000\004\040\uffdc\001\002\000\004\040\uffdd\001\002" +
    "\000\004\040\175\001\002\000\006\042\uffdf\044\uffdf\001" +
    "\002\000\006\042\uffe0\044\uffe0\001\002\000\004\040\uffe7" +
    "\001\002\000\004\037\147\001\002\000\004\040\uffe5\001" +
    "\002\000\004\040\uffe6\001\002\000\004\043\204\001\002" +
    "\000\004\037\111\001\002\000\004\030\uffea\001\002\000" +
    "\006\012\053\013\054\001\002\000\004\042\210\001\002" +
    "\000\012\011\ufff9\015\ufff9\016\ufff9\017\ufff9\001\002\000" +
    "\006\023\ufff4\040\ufff4\001\002\000\006\012\053\013\054" +
    "\001\002\000\004\042\214\001\002\000\004\014\215\001" +
    "\002\000\004\041\216\001\002\000\004\050\217\001\002" +
    "\000\004\042\220\001\002\000\012\011\ufffc\015\ufffc\016" +
    "\ufffc\017\ufffc\001\002\000\006\012\053\013\054\001\002" +
    "\000\004\042\223\001\002\000\012\011\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\001\002\000\004\040\225\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\006\001\001\000\014\005\035" +
    "\007\041\010\042\011\040\012\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\035" +
    "\007\041\010\042\011\040\012\210\001\001\000\002\001" +
    "\001\000\004\014\071\001\001\000\002\001\001\000\014" +
    "\005\035\007\041\010\042\011\040\012\070\001\001\000" +
    "\014\005\035\007\041\010\042\011\040\012\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\046\001" +
    "\001\000\004\015\055\001\001\000\002\001\001\000\004" +
    "\006\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\102\001\001\000\004\023\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\107" +
    "\020\106\001\001\000\002\001\001\000\004\017\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\107\020\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\144\026\145\001\001\000\002\001\001\000\004\025" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\157\001\001\000\002\001\001\000\004\034\161\001" +
    "\001\000\004\030\164\001\001\000\004\027\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\201\026\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\107\020\204\001\001" +
    "\000\002\001\001\000\004\006\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSONParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSONParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSONParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private PrincipalFrame principalFrame;
    private StructureDriver structure = new StructureDriver();

    public JSONParser(JSONLexer lexer, PrincipalFrame principalFrame) {
        super(lexer);
       this.principalFrame = principalFrame;
    }

    public void syntax_error(Symbol symbol) {
        this.principalFrame.printSyntaxError(String.valueOf(symbol.value), sym.terminalNames[symbol.sym]);
    }

    public StructureDriver getStructure() {
        return structure;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JSONParser$actions {
  private final JSONParser parser;

  /** Constructor */
  CUP$JSONParser$actions(JSONParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JSONParser$do_action_part00000000(
    int                        CUP$JSONParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONParser$parser,
    java.util.Stack            CUP$JSONParser$stack,
    int                        CUP$JSONParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSONParser$result;

      /* select the action based on the action number */
      switch (CUP$JSONParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starting EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		RESULT = start_val;
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSONParser$parser.done_parsing();
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starting ::= CURLYBRACESO mapStructure optionalAttributes endingAttribute planets neutrals players ending 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("starting",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-7)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // starting ::= error BRACKETC CURLYBRACESC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).value;
		 syntax_error((Symbol) e); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("starting",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mapStructure ::= MAPA COLON CURLYBRACESO id COLON ID COMMA sizeStructure 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).value;
		 structure.setMapId(i); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("mapStructure",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-7)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sizeStructure ::= tamaño COLON CURLYBRACESO filas COLON INTEGER COMMA columnas COLON INTEGER CURLYBRACESC COMMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).value;
		 structure.setMapLimits(Integer.valueOf(i), Integer.valueOf(e)); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("sizeStructure",2, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-11)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // randomMap ::= alAzar COLON boolean COMMA planetasNeutrales COLON INTEGER COMMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 structure.setOptionalAttributes(a, 0); 
                 structure.setNeutralPlanets(Integer.valueOf(i)); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("randomMap",3, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-7)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // boolean ::= FALSE 
            {
              Object RESULT =null;
		 structure.setTemporal(false); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("boolean",4, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // boolean ::= TRUE 
            {
              Object RESULT =null;
		 structure.setTemporal(true); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("boolean",4, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // blindMap ::= mapaCiego COLON boolean COMMA 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).value;
		 structure.setOptionalAttributes(m, 0); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("blindMap",5, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // accumulation ::= acumular COLON boolean COMMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).value;
		 structure.setOptionalAttributes(a, 0); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("accumulation",6, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // neutralStructure ::= NEUTRALES COLON CURLYBRACESO showSpaceships showStadistics produccion COLON INTEGER CURLYBRACESC COMMA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).value;
		 structure.setNeutrals(p, Integer.valueOf(i)); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("neutralStructure",7, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-9)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // showSpaceships ::= mostrarNaves COLON boolean COMMA 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).value;
		 structure.setNeutrals(m, 0); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("showSpaceships",9, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // showStadistics ::= mostrarEstadisticas COLON boolean COMMA 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).value;
		 structure.setNeutrals(m, 0); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("showStadistics",11, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optionalAttributes ::= randomMap optionalAttributes 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("optionalAttributes",8, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optionalAttributes ::= blindMap optionalAttributes 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("optionalAttributes",8, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optionalAttributes ::= accumulation optionalAttributes 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("optionalAttributes",8, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optionalAttributes ::= neutralStructure 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("optionalAttributes",8, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // endingAttribute ::= finalizacion COLON INTEGER endingAttribute 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 structure.setOptionalAttributes(f, Integer.valueOf(i)); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("endingAttribute",10, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // endingAttribute ::= CURLYBRACESC COMMA 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("endingAttribute",10, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // planetAttributes ::= CURLYBRACESO nombre COLON NAME COMMA naves COLON INTEGER COMMA produccion COLON INTEGER COMMA porcentajeMuertes COLON PERCENTAGE CURLYBRACESC 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-13)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-13)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-13)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 structure.setPlanetAttributes(n, Integer.valueOf(i), Integer.valueOf(e), Double.valueOf(p)); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("planetAttributes",12, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-16)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // planetEnding ::= COMMA planetStructure 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("planetEnding",13, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // planetEnding ::= BRACKETC COMMA 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("planetEnding",13, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // planetStructure ::= planetAttributes planetEnding 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("planetStructure",14, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // planets ::= PLANETAS COLON BRACKETO planetStructure 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("planets",15, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // neutrals ::= PLANETAS_NEUTRALES COLON BRACKETO planetStructure 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("neutrals",16, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // players ::= JUGADORES COLON BRACKETO playerStructure 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("players",17, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // playerStructure ::= playerAttributes playerEnding 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("playerStructure",18, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // playerEnding ::= COMMA playerStructure 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("playerEnding",19, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // playerEnding ::= BRACKETC 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("playerEnding",19, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
 structure.setPlayerName(p); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // playerAttributes ::= CURLYBRACESO nombre COLON PLAYER NT$0 COMMA planetas COLON BRACKETO ownedPlanets 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-6)).value;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("playerAttributes",20, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-9)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$1 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
 structure.setOwnedPlanets(n); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ownedPlanets ::= NAME NT$1 symbol 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).value;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("ownedPlanets",21, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // symbol ::= COMMA ownedPlanets 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("symbol",22, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // symbol ::= BRACKETC COMMA tipo COLON type CURLYBRACESC 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("symbol",22, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= HUMANO 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 structure.setPlayerAttributes(h); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= FACIL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 structure.setPlayerAttributes(f); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= DIFICIL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 structure.setPlayerAttributes(d); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ending ::= CURLYBRACESC 
            {
              Object RESULT =null;

              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("ending",24, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JSONParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JSONParser$do_action(
    int                        CUP$JSONParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONParser$parser,
    java.util.Stack            CUP$JSONParser$stack,
    int                        CUP$JSONParser$top)
    throws java.lang.Exception
    {
              return CUP$JSONParser$do_action_part00000000(
                               CUP$JSONParser$act_num,
                               CUP$JSONParser$parser,
                               CUP$JSONParser$stack,
                               CUP$JSONParser$top);
    }
}

}
