package com.zofia.lexers;
import java_cup.runtime.*;
import com.zofia.parsers.XML.sym;
import com.zofia.frontend.PrincipalFrame;

%%//Area Break

%public
%class XMLlexer
%cup
%cupdebug
%line
%column

/*Identifiers*/
Letter = [a-zA-Z]
Sign = [_$]
Number = [1-9]
LineTerminator = \r|\n|\r\n 
WhiteSpace = {LineTerminator} | [ \t\f\b]
Id = ("\"")({Letter}|{Sign})({Letter}|{Number}|{Sign}|"-")*("\"")
Integer = ({Number})({Number}|"0")* | 0
Percentage = ("0.")({Number}|"0")+
Player = ("\"")({Letter})({Letter}|{Number})?({Letter}|{Number})?({Letter}|{Number})?({Letter}|{Number})?({Letter}|{Number})?({Letter}|{Number})?({Letter}|{Number})?({Letter}|{Number})?({Letter}|{Number})?("\"")
Name = ("\"")({Letter})({Letter})?({Letter})?("\"")

%{
    private PrincipalFrame frame;
    
    public XMLlexer(java.io.Reader in, PrincipalFrame frame) {
        this.zzReader = in;
        this.frame = frame;
    }

    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    private void printToken(String token){
        System.out.println(token);
    }

    private void error(String value, int line, int column) {
        frame.printLexicalError(value, line, column);
    }
%}

%%//Area Break

/*Lexical Rules*/

<YYINITIAL> {
    /* Keywords */
    "JUEGO"                     { printToken("JUEGO"); return symbol(sym.JUEGO, "JUEGO"); }
    "MAPA"                      { printToken("MAPA"); return symbol(sym.MAPA, "MAPA"); }
    "id"                        { printToken("Id"); return symbol(sym.id, "id");}
    "SIZE"                      { printToken("SIZE"); return symbol(sym.SIZE, "SIZE");}
    "filas"                     { printToken("filas"); return symbol(sym.filas, "filas");}
    "columnas"                  { printToken("columnas"); return symbol(sym.columnas, "columnas");}
    "alAzar"                    { printToken("alAzar"); return symbol(sym.alAzar, "alAzar");}
    "true"                      { printToken("true"); return symbol(sym.TRUE, "true");}
    "false"                     { printToken("false"); return symbol(sym.FALSE, "false");}
    "planetasNeutrales"         { printToken("planetasNeutrales"); return symbol(sym.planetasNeutrales, "planetasNeutrales");}
    "mapaCiego"                 { printToken("mapaCiego"); return symbol(sym.mapaCiego, "mapaCiego");}
    "acumular"                  { printToken("acumular"); return symbol(sym.acumular, "acumular");}
    "NEUTRALES"                 { printToken("NEUTRALES"); return symbol(sym.NEUTRALES, "NEUTRALES");}
    "mostrarNaves"              { printToken("mostrarNaves"); return symbol(sym.mostrarNaves, "mostrarNaves");}
    "mostrarEstadisticas"       { printToken("mostrarEstadisticas"); return symbol(sym.mostrarEstadisticas, "mostrarEstadisticas");}
    "produccion"                { printToken("produccion"); return symbol(sym.produccion, "produccion");}
    "finalizacion"              { printToken("finalizacion"); return symbol(sym.finalizacion, "finalizacion");}
    "CONQUISTADO"               { printToken("CONQUISTADO"); return symbol(sym.CONQUISTADO, "CONQUISTADO"); }
    "PLANETAS"                  { printToken("PLANETAS"); return symbol(sym.PLANETAS, "PLANETAS");}
    "nombre"                    { printToken("nombre"); return symbol(sym.nombre, "nombre");}
    "naves"                     { printToken("naves"); return symbol(sym.naves, "naves");}
    "propietario"               { printToken("propietario"); return symbol(sym.propietario, "propietario");}
    "porcentajeMuertes"         { printToken("porcentajeMuertes"); return symbol(sym.porcentajeMuertes, "porcentajeMuertes");}
    "NEUTRAL"                   { printToken("NEUTRAL"); return symbol(sym.NEUTRAL, "NEUTRAL");}
    "JUGADORES"                 { printToken("JUGADORES"); return symbol(sym.JUGADORES, "JUGADORES");}
    "JUGADOR"                   { printToken("JUGADOR"); return symbol(sym.JUGADOR, "JUGADOR");}
    "color"                     { printToken("color"); return symbol(sym.color, "color");}
    "tipo"                      { printToken("tipo"); return symbol(sym.tipo, "tipo");}
    "HUMANO"                    { printToken("HUMANO"); return symbol(sym.HUMANO, "HUMANO");}
    "FACIL"                     { printToken("FACIL"); return symbol(sym.FACIL, "FACIL");}
    "DIFICIL"                   { printToken("DIFICIL"); return symbol(sym.DIFICIL, "DIFICIL");}
    /* Signs */
    "<"                         { printToken("<"); return symbol(sym.MENORQUE, "<");}
    ">"                         { printToken(">"); return symbol(sym.MAYORQUE, ">");}
    "="                         { printToken("="); return symbol(sym.EQUAL, "=");}
    "/"                         { printToken("/"); return symbol(sym.SLASH, "/");}
    /* Others */
    {Name}                      { printToken("Name " + yytext()); return symbol(sym.NAME, yytext());}
    {Player}                    { printToken("Player " + yytext()); return symbol(sym.PLAYER, yytext());}    
    {Id}                        { printToken("Id " + yytext()); return symbol(sym.ID, yytext());}
    {Integer}                   { printToken(yytext()); return symbol(sym.INTEGER, yytext());}
    {Percentage}                { printToken(yytext()); return symbol(sym.PERCENTAGE, yytext());}
    {WhiteSpace}                { /*do nothing*/ }
    .                           { printToken("ERROR: " + yytext()); error(yytext(), yyline+1, yycolumn+1); }
}

    <<EOF>>                     { return symbol(sym.EOF); } 
